exp2_symbol<-na.omit(exp2_symbol)
table(duplicated(exp2_symbol$`Gene symbol`))
exp2_unique<-avereps(exp2_symbol[,-c(1,ncol(exp2_symbol))], ID = exp2_symbol$`Gene symbol`)
table(duplicated(rownames(exp2_unique)))
save(exp2, exp2_symbol,exp2_unique, GPL1, gpl1, gse, group, Clinfo1,file = "GSE18290_GPL2112.Rdata")
options(stringsAsFactors = F)
Sys.setenv("VROOM_CONNECTION_SIZE"=131702*600)
library(GEOquery)
library(limma)
library(affy)
gse<-getGEO("GSE18290",destdir = ".",
getGPL = T,
AnnotGPL =T)
gse[[2]]
exp2<-exprs(gse[[2]])
Clinfo1<-pData(gse[[]])
group<-c(rep("aoocyte",2), rep("bonecell",2), rep("ctwocell",2), rep("dfourcell",2),
rep("eightcell",2), rep("fsixteencell",2),rep("gmorula",2), rep("hblast",2))
GPL1<-fData(gse[[2]])
gpl1<-GPL1[,c(1,3)]
gpl1$"Gene symbol" <-data.frame(sapply(gpl1$"Gene symbol", function(x)unlist(strsplit(x, "///"))[1]),
stringsAsFactors = F) [,1]
exp2<-as.data.frame(exp2)
exp2$ID<-rownames(exp2)
exp2_symbol<-merge(exp2,gpl1,by = "ID")
exp2_symbol<-na.omit(exp2_symbol)
table(duplicated(exp2_symbol$`Gene symbol`))
exp2_unique<-avereps(exp2_symbol[,-c(1,ncol(exp2_symbol))], ID = exp2_symbol$`Gene symbol`)
table(duplicated(rownames(exp2_unique)))
save(exp2, exp2_symbol,exp2_unique, GPL1, gpl1, gse, group, Clinfo1,file = "GSE18290_GPL2112.Rdata")
save(exp2, exp2_symbol,exp2_unique, GPL1, gpl1, gse, group, Clinfo2,file = "GSE18290_GPL2112.Rdata")
Clinfo2<-pData(gse[[2]])
save(exp2, exp2_symbol,exp2_unique, GPL1, gpl1, gse, group, Clinfo2,file = "GSE18290_GPL2112.Rdata")
load("GSE18290_GPL2112.Rdata")
boxplot(exp1_unique)
options (stringsAsFactors = F)
library(limma)
boxplot(exp1_unique)
load("GSE18290_GPL2112.Rdata")
boxplot(exp1_unique)
load("GSE18290_GPL2112.Rdata")
boxplot(exp1_unique)
library(limma)
load("GSE18290_GPL2112.Rdata")
boxplot(exp2_unique)
options (stringsAsFactors = F)
library(limma)
View(vsn.qmouse)
load("~/Bioinfo/2022-topic-04-team-04/project/GSE18290_GPL2112.Rdata")
table(duplicated(rownames(exp2_unique)))
table(duplicated(rownames(exp2_unique)))
View(exp2_symbol)
View(GPL1)
View(exp2)
View(Clinfo2)
design<-model.matrix(~0+factor(group))
colnames(design)<-levels(factor(group))
rownames(design)<-colnames(exp1_unique)
rownames(design)<-colnames(exp2_unique)
design<-model.matrix(~0+factor(group))
colnames(design)<-levels(factor(group))
rownames(design)<-colnames(exp2_unique)
library(limma)
design<-model.matrix(~0+factor(group))
colnames(design)<-levels(factor(group))
rownames(design)<-colnames(exp2_unique)
dimnames[1]
dimnames(exp2_unique[1])
design<-model.matrix(~0+factor(group))
colnames(design)<-levels(factor(group))
rownames(design)<-colnames(exp2_unique)
#download data and ID conversion
options(stringsAsFactors = F)
Sys.setenv("VROOM_CONNECTION_SIZE"=131702*600)
library(GEOquery)
library(limma)
library(affy)
gse<-getGEO("GSE18290",destdir = ".",
getGPL = T,
AnnotGPL =T)
gse[[2]]
exp2<-exprs(gse[[2]])
Clinfo2<-pData(gse[[2]])
group<-c(rep("aoocyte",2), rep("bonecell",2), rep("ctwocell",2), rep("dfourcell",2),
rep("eightcell",2), rep("fsixteencell",2),rep("gmorula",2), rep("hblast",2))
GPL1<-fData(gse[[2]])
gpl1<-GPL1[,c(1,3)]
gpl1$"Gene symbol" <-data.frame(sapply(gpl1$"Gene symbol", function(x)unlist(strsplit(x, "///"))[1]),
stringsAsFactors = F) [,1]
exp2<-as.data.frame(exp2)
exp2$ID<-rownames(exp2)
exp2_symbol<-merge(exp2,gpl1,by = "ID")
exp2_symbol<-na.omit(exp2_symbol)
table(duplicated(exp2_symbol$`Gene symbol`))
exp2_unique<-avereps(exp2_symbol[,-c(1,ncol(exp2_symbol))], ID = exp2_symbol$`Gene symbol`)
table(duplicated(rownames(exp2_unique)))
save(exp2, exp2_symbol,exp2_unique, GPL1, gpl1, gse, group, Clinfo2,file = "GSE18290_GPL2112.Rdata")
load("GSE18290_GPL2112.Rdata")
boxplot(exp2_unique)
options (stringsAsFactors = F)
library(limma)
# expression matrix, design matrix, contrast matrix
# design matrix
design<-model.matrix(~0+factor(group))
colnames(design)<-levels(factor(group))
rownames(design)<-colnames(exp2_unique)
#contrast matrix"
contrast.matrix<-makeContrasts(blast-onecell, blast-twocell, blast-fourcell, blast-eightcell,
blast-sixteencell, blast-morula, levels = design1 )
contrast.matrix
contrast.matrix<-makeContrasts(blast-onecell, blast-twocell, blast-fourcell, blast-eightcell,
blast-sixteencell, blast-morula, levels = design )
contrast.matrix
#contrast matrix"
contrast.matrix<-makeContrasts(blast-onecell, blast-twocell, blast-fourcell, blast-eightcell,
blast-sixteencell, blast-morula, levels = design )
?blast
??blast
View(exp2_unique)
library(pheatmap)
pheatmap(exp2_unique)
pheatmap(exp2_unique [1:50,])
pheatmap(exp2_unique [1:50,], fontsize = 7)
pheatmap(exp2_unique [1:50,], fontsize = 7, fontsize_row = fontsize)
pheatmap(exp2_unique [1:50,], fontsize = 7, fontsize_row = 5)
pheatmap(exp2_unique [1:50,], fontsize = 7, fontsize_row = 1)
pheatmap(exp2_unique [1:50,], fontsize = 7, fontsize_row = 3)
pheatmap(exp2_unique [1:50,], fontsize = 7, fontsize_row = 2)
projectPath <- dirname(rstudioapi::getSourceEditorContext()$path)
library(GEOquery)
library(limma)
library(affy)
gse<-getGEO("GSE18290",destdir = ".",
getGPL = T,
AnnotGPL =T)
library(GEOquery)
library(limma)
library(affy)
gse<-getGEO("GSE18290",destdir = ".",
getGPL = T,
AnnotGPL =T)
library(GEOquery)
library(limma)
library(affy)
gse<-getGEO("GSE18290",destdir = ".",
getGPL = T,
AnnotGPL =T)
gse[[2]]
exp2<-exprs(gse[[2]])
Clinfo2<-pData(gse[[2]])
group<-c(rep("aoocyte",2), rep("bonecell",2), rep("ctwocell",2), rep("dfourcell",2),
rep("eightcell",2), rep("fsixteencell",2),rep("gmorula",2), rep("hblast",2))
GPL1<-fData(gse[[2]])
gpl1<-GPL1[,c(1,3)]
gpl1$"Gene symbol" <-data.frame(sapply(gpl1$"Gene symbol", function(x)unlist(strsplit(x, "///"))[1]),
stringsAsFactors = F) [,1]
exp2<-as.data.frame(exp2)
exp2$ID<-rownames(exp2)
exp2_symbol<-merge(exp2,gpl1,by = "ID")
exp2_symbol<-na.omit(exp2_symbol)
table(duplicated(exp2_symbol$`Gene symbol`))
exp2_unique<-avereps(exp2_symbol[,-c(1,ncol(exp2_symbol))], ID = exp2_symbol$`Gene symbol`)
table(duplicated(rownames(exp2_unique)))
save(exp2, exp2_symbol,exp2_unique, GPL1, gpl1, gse, group, Clinfo2,file = "GSE18290_GPL2112.Rdata")
gse<-getGEO("GSE18290",destdir = ".",
getGPL = T,
AnnotGPL =T)
exp2<-exprs(gse[[2]])
Clinfo2<-pData(gse[[2]])
group<-c(rep("aoocyte",2), rep("bonecell",2), rep("ctwocell",2), rep("dfourcell",2),
rep("eightcell",2), rep("fsixteencell",2),rep("gmorula",2), rep("hblast",2))
GPL1<-fData(gse[[2]])
gpl1<-GPL1[,c(1,3)]
gpl1$"Gene symbol" <-data.frame(sapply(gpl1$"Gene symbol", function(x)unlist(strsplit(x, "///"))[1]),
stringsAsFactors = F) [,1]
exp2<-as.data.frame(exp2)
exp2$ID<-rownames(exp2)
exp2_symbol<-merge(exp2,gpl1,by = "ID")
exp2_symbol<-na.omit(exp2_symbol)
table(duplicated(exp2_symbol$`Gene symbol`))
exp2_unique<-avereps(exp2_symbol[,-c(1,ncol(exp2_symbol))], ID = exp2_symbol$`Gene symbol`)
table(duplicated(rownames(exp2_unique)))
save(exp2, exp2_symbol,exp2_unique, GPL1, gpl1, gse, group, Clinfo2,file = "GSE18290_GPL2112.Rdata")
pheatmap(exp2_unique [1:50,], fontsize_row = 2)
pheatmap(exp2_unique [1:50,], fontsize_row = 2.5)
pheatmap(exp2_unique [1:50,], fontsize_row = 4)
matched_tissues = TRA_total[which(TRA_total[,1] %in% rownames(TRAs_mousedataset)),]
View(matched_tissues)
#matched_tissues_copy = cbind(matched_tissues[,1], matched_tissues)
duplicates = duplicated(matched_tissues[,1])
matched_tissues_new = matched_tissues[!duplicates,]
data_ohneaffx= vsn.qmouse[65:39345,]
namen=(substr(rownames(data_ohneaffx),0,18)[1:39281])
rownames(data_ohneaffx) <- c(namen)
data_ohneaffx
TRA_total = rbind(TRAs1,TRAs2)
unique_TRAs = unique(TRAs1$ensembl.transcript, TRAs2$ensembl.transcript)
TRAs_mousedataset = data_ohneaffx[which(rownames(data_ohneaffx) %in% unique_TRAs),]
setwd(paste(projectPath, "rawdata", "TRA_data", sep = "/"))
TRAs1 <-read_tsv("tra.2014.mouse.5x.table.tsv")
TRAs2 <-read_tsv("tra.2014.mouse.4301.5x.table.tsv")
setwd(paste(projectPath, "rawdata", "TRA_data", sep = "/"))
TRAs1 <-read_tsv("tra.2014.mouse.5x.table.tsv")
TRAs2 <-read_tsv("tra.2014.mouse.4301.5x.table.tsv")
library(affy)
library(vsn)
library(AnnotationDbi)
library(moe430ammenstprobe)
library(moe430ammenstcdf)
library(hexbin)
library(pheatmap)
library(rstudioapi)
library(tidyverse)
library(dplyr)
library(icd.data)
library(tibble)
library(limma)
setwd(paste(projectPath, "rawdata", "TRA_data", sep = "/"))
TRAs1 <-read_tsv("tra.2014.mouse.5x.table.tsv")
TRAs2 <-read_tsv("tra.2014.mouse.4301.5x.table.tsv")
TRA_total = rbind(TRAs1,TRAs2)
unique_TRAs = unique(TRAs1$ensembl.transcript, TRAs2$ensembl.transcript)
TRAs_mousedataset = data_ohneaffx[which(rownames(data_ohneaffx) %in% unique_TRAs),]
TRA_total = rbind(TRAs1,TRAs2)
unique_TRAs = unique(TRAs1$ensembl.transcript, TRAs2$ensembl.transcript)
TRAs_mousedataset = data_ohneaffx[which(rownames(data_ohneaffx) %in% unique_TRAs),]
TRA_total = rbind(TRAs1,TRAs2)
unique_TRAs = unique(TRAs1$ensembl.transcript, TRAs2$ensembl.transcript)
TRAs_mousedataset = data_ohneaffx[which(rownames(data_ohneaffx) %in% unique_TRAs),]
TRA_total = rbind(TRAs1,TRAs2)
setwd(paste(projectPath, "rawdata", "TRA_data", sep = "/"))
TRAs1 <-read_tsv("tra.2014.mouse.5x.table.tsv")
TRAs2 <-read_tsv("tra.2014.mouse.4301.5x.table.tsv")
library(affy)
library(vsn)
library(AnnotationDbi)
library(moe430ammenstprobe)
library(moe430ammenstcdf)
library(hexbin)
library(pheatmap)
library(rstudioapi)
library(tidyverse)
library(dplyr)
library(icd.data)
library(tibble)
library(limma)
projectPath <- dirname(rstudioapi::getSourceEditorContext()$path)
data_ohneaffx= vsn.qmouse[65:39345,]
namen=(substr(rownames(data_ohneaffx),0,18)[1:39281])
rownames(data_ohneaffx) <- c(namen)
data_ohneaffx
setwd(paste(projectPath, "rawdata", "TRA_data", sep = "/"))
TRAs1 <-read_tsv("tra.2014.mouse.5x.table.tsv")
TRAs2 <-read_tsv("tra.2014.mouse.4301.5x.table.tsv")
TRA_total = rbind(TRAs1,TRAs2)
unique_TRAs = unique(TRAs1$ensembl.transcript, TRAs2$ensembl.transcript)
TRAs_mousedataset = data_ohneaffx[which(rownames(data_ohneaffx) %in% unique_TRAs),]
matched_tissues = TRA_total[which(TRA_total[,1] %in% rownames(TRAs_mousedataset)),]
View(matched_tissues)
#matched_tissues_copy = cbind(matched_tissues[,1], matched_tissues)
duplicates = duplicated(matched_tissues[,1])
matched_tissues_new = matched_tissues[!duplicates,]
#####Amena Code Dump----------------------------####################
matched_tissues = TRA_total[which(TRA_total[,1] %in% rownames(TRAs_mousedataset)),]
TRAs_mousedataset = data_ohneaffx[which(rownames(data_ohneaffx) %in% unique_TRAs),]
#####Amena Code Dump----------------------------####################
matched_tissues = TRA_total[which(TRA_total[,1] %in% rownames(TRAs_mousedataset)),]
#####Amena Code Dump----------------------------####################
matched_tissues = TRA_total[which(TRA_total[,1] %in% rownames(TRAs_mousedataset)),]
View(matched_tissues)
TRA_total[,1]
rownames(TRAs_mousedataset)
#####Amena Code Dump----------------------------####################
matched_tissues = TRA_total[which(TRA_total[,1] %in% rownames(TRAs_mousedataset)),]
data_ohneaffx= vsn.qmouse[65:39345,]
namen=(substr(rownames(data_ohneaffx),0,18)[1:39281])
rownames(data_ohneaffx) <- c(namen)
data_ohneaffx
knitr::opts_chunk$set(echo = TRUE)
library(affy)
library(vsn)
library(AnnotationDbi)
library(moe430ammenstcdf)
library(moe430ammenstprobe)
library(cluster)
library(dplyr)
library(hexbin)
library(pheatmap)
library(rstudioapi)
library(tidyverse)
library(readr)
library(ggplot2)
library(knitr)
library(limma)
library(Rcpp)
library(icd.data)
library(tibble)
projectPath <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(paste(projectPath,"rawdata","zippedmouse",sep = "/"))
data.mouse=ReadAffy()
data.mouse@cdfName <- "MOE430A_Mm_ENST"
data_ohneaffx= vsn.qmouse[65:39345,]
setwd(paste(projectPath,"rawdata","qualityzipped",sep = "/"))
qdata.mouse = ReadAffy()
qdata.mouse@cdfName <- "MOE430A_Mm_ENST"
vsnqmouse = vsnrma(qdata.mouse)
vsn.qmouse = exprs(vsnqmouse)
data_ohneaffx= vsn.qmouse[65:39345,]
namen=(substr(rownames(data_ohneaffx),0,18)[1:39281])
rownames(data_ohneaffx) <- c(namen)
data_ohneaffx
setwd(paste(projectPath, "rawdata", "TRA_data", sep = "/"))
TRAs1 <-read_tsv("tra.2014.mouse.5x.table.tsv")
TRAs2 <-read_tsv("tra.2014.mouse.4301.5x.table.tsv")
TRA_total = rbind(TRAs1,TRAs2)
unique_TRAs = unique(TRAs1$ensembl.transcript, TRAs2$ensembl.transcript)
TRAs_mousedataset = data_ohneaffx[which(rownames(data_ohneaffx) %in% unique_TRAs),]
#####Amena Code Dump----------------------------####################
matched_tissues = TRA_total[which(TRA_total[,1] %in% rownames(TRAs_mousedataset)),]
View(TRAs_mousedataset)
View(TRA_total)
#####Amena Code Dump----------------------------####################
matched_tissues = TRA_total[which(TRA_total[,1] %in% rownames(TRAs_mousedataset)),]
View(matched_tissues)
matched_tissues = TRA_total[which(TRA_total[,1] %in% rownames(TRAs_mousedataset)),]
View(matched_tissues)
matched_tissues = TRA_total[which(TRA_total[,1] %in% rownames(TRAs_mousedataset)),]
matched_tissues = TRA_total[which(TRA_total[,1] %in% rownames(TRAs_mousedataset)),]
View(matched_tissues)
View(TRAs_mousedataset)
tissue1 = TRA_total[is.element(TRA_total$ensembl.transcript, vec), ] #hat 10207 Zeilen anstatt nur 6188...
vec = c(rownames(TRAs_mousedataset)) # alle unique TRAs sind jetzt in diesem Vektor
tissue1 = TRA_total[is.element(TRA_total$ensembl.transcript, vec), ] #hat 10207 Zeilen anstatt nur 6188...
duplicate = duplicated(tissue1[,1])
matched_tissue1 = tissue1[!duplicate,]
View(matched_tissue1)
saveRDS(matched_tissue1, file = "matched_tissue1.rds")
TRA_total
TRA_tissuenames = as.data.frame(TRA_total[,11])
TRA_tissuevector = c(TRA_tissuenames)
Tissue_counts = table(TRA_tissuevector)
Tissue_sort = sort(Tissue_counts)
Top_tissue = tail(Tissue_sort)
plot(Top_tissue)
plot(Tissue_counts)
matched_tissuenames = as.data.frame(matched_tissue1[,11])
matched_tissuevector = c(matched_tissuenames)
matched_Tissue_counts = table(matched_tissuevector)
matched_Tissue_sort = sort(matched_Tissue_counts)
matched_Top_tissue = tail(matched_Tissue_sort)
plot(matched_Top_tissue)
plot(matched_Tissue_counts)
View(matched_Tissue_sort)
TRA_tissuenames = tail(sort(table(c(as.data.frame(TRA_total[,11])))))
plot(TRA_tissuenames)
TRA_tissuenames = sort(table(c(as.data.frame(TRA_total[,11]))))
plot(TRA_tissuenames)
TRA_top_tissue = tail(TRA_tissuenames)
plot(TRA_top_tissue)
tissue1 = TRA_total[is.element(TRA_total$ensembl.transcript, rownames(TRAs_mousedataset)), ] #hat 10207 Zeilen anstatt nur 6188...
duplicate = duplicated(tissue1[,1])
matched_tissue1 = tissue1[!duplicate,]
tissue = TRA_total[is.element(TRA_total$ensembl.transcript, rownames(TRAs_mousedataset)), ] #hat 10207 Zeilen anstatt nur 6188...
duplicate = duplicated(tissue[,1])
matched_tissue = tissue[!duplicate,]
saveRDS(matched_tissue, file = "matched_tissue.rds")
tissue = TRA_total[is.element(TRA_total$ensembl.transcript,
rownames(TRAs_mousedataset)), ]
duplicate = duplicated(tissue[,1])
matched_tissue = tissue[!duplicate,]
View(matched_tissue)
matched_tissuenames = sort(table(c(as.data.frame(matched_tissue[,11]))))
matched_top_tissue = tail(matched_tissuenames)
plot(matched_tissuenames)
plot(matched_top_tissue)
barplot(matched_tissuenames, las =2)
barplot(matched_top_tissue, las = 2)
TRA_tissuenames = sort(table(c(as.data.frame(TRA_total[,11]))))
TRA_top_tissue = tail(TRA_tissuenames)
plot(TRA_tissuenames,las =2, xlab = "tissue" , ylab="Frequency")
plot(TRA_top_tissue,las =2, xlab = "tissue" , ylab="Frequency")
TRA_tissuenames = sort(table(c(as.data.frame(TRA_total[,11]))))
TRA_top_tissue = tail(TRA_tissuenames)
barplot(TRA_tissuenames,las =2, xlab = "tissue" , ylab="Frequency")
barplot(TRA_top_tissue,las =2, xlab = "tissue" , ylab="Frequency")
barplot(TRA_tissuenames,las =2, xlab = "tissue" , ylab="Frequency", title ="Frequency of TRAs in different tissue")
barplot(TRA_tissuenames,las =2, xlab = "tissue" , ylab="Frequency", title ="Frequency of TRAs in different tissue")
barplot(TRA_tissuenames,las =2, xlab = "tissue" , ylab="Frequency", main ="Frequency of TRAs in different tissue")
barplot(TRA_tissuenames,las =2, xlab = "tissue" , ylab="Frequency", main ="Frequency of TRAs in all tissue")
matched_tissuenames = sort(table(c(as.data.frame(matched_tissue[,11]))))
matched_top_tissue = tail(matched_tissuenames)
barplot(matched_tissuenames, las =2, xlab = "tissue" , ylab="Frequency",main ="Frequency of matched TRAs in all tissues")
barplot(matched_top_tissue, las =2, xlab = "tissue" , ylab="Frequency",main ="Frequency of matched TRAs in top tissues")
TRA_tissuenames = sort(table(c(as.data.frame(TRA_total[,11]))))
TRA_top_tissue = tail(TRA_tissuenames)
barplot(TRA_tissuenames,las =2, xlab = "tissue" , ylab="Frequency", main ="Frequency of TRAs in all tissues")
barplot(TRA_top_tissue,las =2, xlab = "tissue" , ylab="Frequency",main ="Frequency of TRAs in top tissues")
design1= model.matrix(~0+factor(c(1,1,1,2,2,3,3,3,4,4,4,5,6,6,6)))
colnames(design1)= c("one", "two","four", "eight", "morula", "blastocyst")
fit_matched= lmFit(TRAs_mousedataset, design1)
contrast.matrix_new= makeContrasts(two-one,four-two, eight-four, morula-eight, blastocyst-morula,levels = design1)
fit_matched2= contrasts.fit(fit_matched, contrast.matrix)
design1= model.matrix(~0+factor(c(1,1,1,2,2,3,3,3,4,4,4,5,6,6,6)))
colnames(design1)= c("one", "two","four", "eight", "morula", "blastocyst")
fit_matched= lmFit(TRAs_mousedataset, design1)
contrast.matrix_new= makeContrasts(two-one,four-two, eight-four, morula-eight, blastocyst-morula,levels = design1)
fit_matched2= contrasts.fit(fit_matched, contrast.matrix)
contrast.matrix= makeContrasts(two-one,four-two, eight-four, morula-eight, blastocyst-morula,levels = design1)
fit_matched2= contrasts.fit(fit_matched, contrast.matrix)
fit_matched2= eBayes(fit_matched2)
results1= decideTests(fit_matched2)
View(results1)
summary(results1)
#elbow plot
plot(x=c(1,2,3,4,5), y=summary(results1)[1,], xlab ="cell stages", ylab="sum of downregulated genes", type = "l")
plot(x=c(1,2,3,4,5), y=summary(results1)[2,],xlab ="cell stages", ylab="sum of  genes with no significant change", type = "l")
plot(x=c(1,2,3,4,5), y=summary(results1)[3,], xlab ="cell stages", ylab="sum of upregulated genes", type = "l")
View(matched_tissue)
View(results1)
###############################DGe mit tissues in gleiche tabelle
DGE_tissues = cbind(results1, matched_tissue[,11])
View(DGE_tissues)
View(DGE_tissues)
mean_expression_1cell = rowMeans(TRAs_mousedataset[,1:3])
mean_expression_2cell = rowMeans(TRAs_mousedataset[,4:5])
mean_expression_4cell = rowMeans(TRAs_mousedataset[,6:8])
mean_expression_8cell = rowMeans(TRAs_mousedataset[,9:11])
mean_expression_morula = TRAs_mousedataset[,12]
# df mean expression zeigt mean expressions pro zellstadium, noch keine Tissues vorhanden
df_mean_expression= data.frame(mean_expression_1cell, mean_expression_2cell, mean_expression_4cell, mean_expression_8cell, mean_expression_morula,mean_expression_blastocyst)
df_mean_expression
mean_expression_blastocyst = rowMeans(TRAs_mousedataset[,13:15])
# df mean expression zeigt mean expressions pro zellstadium, noch keine Tissues vorhanden
df_mean_expression= data.frame(mean_expression_1cell, mean_expression_2cell, mean_expression_4cell, mean_expression_8cell, mean_expression_morula,mean_expression_blastocyst)
df_mean_expression
View(df_mean_expression)
##matrix mit 4-8 cell overexpressed
DGE_foureight = cbind(DGE_tissues[,3],DGE_tissues[,6])
View(DGE_foureight)
rownames(DGE_foureight) = rownames(DGE_tissues)
View(DGE_foureight)
colnames(DGE_foureight) = c("four to eight","max.tissue")
View(DGE_foureight)
DGE_foureight_oe = DGE_foureight[DGE_foureight[,1] == 1]
View(DGE_foureight_oe)
DGE_foureight_oe = DGE_foureight[DGE_foureight[,1] == "1"]
View(DGE_foureight_oe)
DGE_foureight_oe1 = subset(DGE_foureight, four to eight ==1)
DGE_foureight_oe1 = subset(DGE_foureight, "four to eight" ==1)
View(DGE_foureight_oe1)
DGE_foureight_oe1 = subset(DGE_foureight, "four to eight" =="1")
View(DGE_foureight_oe1)
DGE_foureight_oe = DGE_foureight[DGE_foureight[,1] == 1,]
View(DGE_foureight_oe)
barplot(DGE_foureight_oe,las =2, xlab = "tissue" , ylab="Frequency",main ="Frequency of matched TRAs in top tissues")
DGE_foureight_oe_count = sort(table(c(as.data.frame(DGE_foureight_oe[,2]))))
DGE_foureight_oe_top = tail(DGE_foureight_oe_count)
barplot(DGE_foureight_oe_count,las =2, xlab = "tissue" , ylab="Frequency",main ="Frequency of matched TRAs in top tissues")
view(DGE_foureight_oe_count)
barplot(DGE_foureight_oe_top,las =2, xlab = "tissue" , ylab="Frequency",main ="Frequency of matched TRAs in top tissues")
# matrix mit 4-8 cell underexpressed
DGE_foureight_ue = DGE_foureight[DGE_foureight[,1] == -1,]
View(DGE_foureight_ue)
DGE_foureight_ue_count = sort(table(c(as.data.frame(DGE_foureight_ue[,2]))))
DGE_foureight_ue_top = tail(DGE_foureight_ue_count)
barplot(DGE_foureight_ue_count,las =2, xlab = "tissue" , ylab="Frequency",main ="Frequency of matched TRAs in top tissues")
view(DGE_foureight_ue_count)
barplot(DGE_foureight_ue_top,las =2, xlab = "tissue" , ylab="Frequency",main ="Frequency of matched TRAs in top tissues")
barplot(DGE_foureight_oe_top,las =2, xlab = "tissue" , ylab="Frequency",main ="Frequency of matched TRAs that are overexpressed in the top 5 tissues")
barplot(DGE_foureight_ue_count,las =2, xlab = "tissue" , ylab="Frequency",main ="Frequency of matched TRAs that are  underexpressed")
barplot(DGE_foureight_ue_top,las =2, xlab = "tissue" , ylab="Frequency",main ="Frequency of matched TRAs that are underexpressed in the top 6 tissues")
barplot(DGE_foureight_oe_top,las =2, xlab = "tissue" , ylab="Frequency",main ="Frequency of matched TRAs that are overexpressed in the top 6 tissues")
barplot(DGE_foureight_oe_top,las =2, xlab = "tissue" , ylab="Frequency",main ="Frequency of matched TRAs that are overexpressed in the top 6 tissues")
barplot(DGE_foureight_oe_top,las =2, xlab = "tissue" , ylab="Frequency",main="Frequency of matched TRAs that are overexpressed in the top 6 tissues")
barplot(DGE_foureight_oe_top,las =2, xlab = "tissue" , ylab="Frequency",main ="Frequency of matched TRAs that are overexpressed in the top 6 tissues")
view(DGE_foureight_oe_count)
DGE_foureight = cbind(DGE_tissues[,2],DGE_tissues[,6])
rownames(DGE_foureight) = rownames(DGE_tissues)
colnames(DGE_foureight) = c("2-4","max.tissue")
DGE_twofour = cbind(DGE_tissues[,2],DGE_tissues[,6])
rownames(DGE_twofour) = rownames(DGE_tissues)
colnames(DGE_twofour) = c("2-4","max.tissue")
DGE_twofour = cbind(DGE_tissues[,2],DGE_tissues[,6])
rownames(DGE_twofour) = rownames(DGE_tissues)
colnames(DGE_twofour) = c("2-4","max.tissue")
DGE_twofour_oe_count = sort(table(c(as.data.frame(DGE_foureight_oe[,2]))))
DGE_twofour_oe_top = tail(DGE_foureight_oe_count)
barplot(DGE_twofour_oe_count,las =2, xlab = "tissue" , ylab="Frequency",main ="Frequency of matched TRAs that are overexpressed")
view(DGE_twofour_oe_count)
barplot(DGE_twofour_oe_top,las =2, xlab = "tissue" , ylab="Frequency",main ="Frequency of matched TRAs that are overexpressed in the top 6 tissues")
View(DGE_tissues)
#oocyte is underexpressed
#twofour
DGE_twofour = cbind(DGE_tissues[,2],DGE_tissues[,6])
rownames(DGE_twofour) = rownames(DGE_tissues)
colnames(DGE_twofour) = c("2-4","max.tissue")
DGE_twofour = cbind(DGE_tissues[,2],DGE_tissues[,6])
rownames(DGE_twofour) = rownames(DGE_tissues)
colnames(DGE_twofour) = c("2-4","max.tissue")
DGE_twofour_oe_count = sort(table(c(as.data.frame(DGE_twofour_oe[,2]))))
DGE_twofour_oe_top = tail(DGE_twofour_oe_count)
barplot(DGE_twofour_oe_count,las =2, xlab = "tissue" , ylab="Frequency",main ="Frequency of matched TRAs that are overexpressed")
view(DGE_twofour_oe_count)
barplot(DGE_twofour_oe_top,las =2, xlab = "tissue" , ylab="Frequency",main ="Frequency of matched TRAs that are overexpressed in the top 6 tissues")
DGE_twofour_oe = cbind(DGE_tissues[,2],DGE_tissues[,6])
rownames(DGE_twofour_oe) = rownames(DGE_tissues)
colnames(DGE_twofour_oe) = c("2-4","max.tissue")
DGE_twofour_oe_count = sort(table(c(as.data.frame(DGE_twofour_oe[,2]))))
DGE_twofour_oe_top = tail(DGE_twofour_oe_count)
barplot(DGE_twofour_oe_count,las =2, xlab = "tissue" , ylab="Frequency",main ="Frequency of matched TRAs that are overexpressed")
view(DGE_twofour_oe_count)
barplot(DGE_twofour_oe_top,las =2, xlab = "tissue" , ylab="Frequency",main ="Frequency of matched TRAs that are overexpressed in the top 6 tissues")
