)
)%>%
dplyr::filter(!is.na(gene_symbols)) %>%
tibble::rownames_to_column("Ensembltransbovine") %>%
dplyr::inner_join(dge.df.b, by = c("Ensembltransbovine" = "Transcript.b"))
any(duplicated(dge_bovinemapped_df$gene_symbols))
bovinedup_gene_symbol <- dge_bovinemapped_df %>%
dplyr::filter(duplicated(gene_symbols)) %>%
dplyr::pull(gene_symbols)
filtered_dge_bovinemapped_df <- dge_bovinemapped_df %>%
# Sort so that the highest absolute values of the t-statistic are at the top
dplyr::arrange(dplyr::desc(abs(dge_bovinemapped_df[,3]))) %>%
# Filter out the duplicated rows using `dplyr::distinct()`-- this will keep
# the first row with the duplicated value thus keeping the row with the
# highest absolute value of the t-statistic
dplyr::distinct(gene_symbols, .keep_all = TRUE)
# Let's create a named vector ranked based on the t-statistic values
Fcbovine_vector <- filtered_dge_bovinemapped_df[,3]
names(Fcbovine_vector) <- filtered_dge_bovinemapped_df$gene_symbols
view(dge_bovinemapped_df)
filtered_dge_bovinemapped_df <- dge_bovinemapped_df %>%
dplyr::arrange(dplyr::desc(abs(dge_bovinemapped_df[,3]))) %>%
dplyr::distinct(gene_symbols, .keep_all = TRUE)
Fcbovine_vector <- filtered_dge_bovinemapped_df[,3]
names(Fcbovine_vector) <- filtered_dge_bovinemapped_df$gene_symbols
Fcbovine_vector <- sort(Fcbovine_vector, decreasing = TRUE)
set.seed(2022)
gsea_bovineresults <- GSEA(
geneList = Fcbovine_vector, # Ordered ranked gene list
minGSSize = 25, # Minimum gene set size
maxGSSize = 500, # Maximum gene set set,
pvalueCutoff = 0.05,# p-value cutoff
eps = 0, # Boundary for calculating the p-value
seed = TRUE, # Set seed to make results reproducible
pAdjustMethod = "BH", # Benjamini-Hochberg correction
TERM2GENE = dplyr::select(
Bt_hallmark_df,
gs_name,
gene_symbol,
)
)
gsea_bovineresults@results
head(gsea_bovineresults@result)
View(gsea_bovineresults@result)
Gsea_bovine <- readRDS("C:/Users/amena/OneDrive - bwedu/Bioinfo/2022-topic-04-team-04/Sessions/RDS_Files/Gsea_bovine.rds")
Gsea_bovine@result
View(Gsea_bovine@result)
#  pvalueCutoff = 0.05,# p-value cutoff
#  eps = 0, # Boundary for calculating the p-value
#  seed = TRUE, # Set seed to make results reproducible
#  pAdjustMethod = "BH", # Benjamini-Hochberg correction
#  TERM2GENE = dplyr::select(
#    Bt_hallmark_df,
#    gs_name,
#    gene_symbol,
#  )
#)
gsea.b = readRDS(paste(projectPath,"Sessions","RDS_Files","Gsea_bovine.rds",sep = "/"))
View(gsea.b@result)
data.bovine  = readRDS(paste(projectPath,"Sessions","RDS_Files","data.bovine16.rds",sep = "/"))
View(data.bovine)
bovine_RNAdeg <- AffyRNAdeg(data.bovine)
pheatmap(heart)
#####venn for heart only 3 stadien
heart= DGE_tissues[DGE_tissues$max.tissue=="heart",]
#setwd(paste(projectPath, "rawdata", "TRA_data", sep = "/"))
#TRAs1 <-read_tsv("tra.2014.mouse.5x.table.tsv")
#TRAs2 <-read_tsv("tra.2014.mouse.4301.5x.table.tsv")
#TRA_total = rbind(TRAs1,TRAs2)
#unique_TRAs = unique(TRAs1$ensembl.transcript, TRAs2$ensembl.transcript)
#TRAs_mousedataset = data_ohneaffx[which(rownames(data_ohneaffx) %in% unique_TRAs),] #removed duplicates
setwd(paste(projectPath,"Sessions","RDS_Files",sep = "/"))
TRA_total = readRDS("TRA_total.rds")
TRAs_mousedata  = readRDS("TRAs_mousedataset.RDS")
#design.m= model.matrix(~0+factor(c(1,1,1,2,2,3,3,3,4,4,4,5,6,6,6)))
#colnames(design.m)= c("one", "two","four", "eight", "morula", "blastocyst")
#fit.m= lmFit(TRAs_mousedataset, design.m)
#contrast.matrix.m= makeContrasts(two-one,four-two, eight-four, morula-eight, blastocyst-morula,levels = design.m)
#fit2.m= contrasts.fit(fit.m, contrast.matrix.m)
#fit2.m= eBayes(fit2.m)
#linear model is done
setwd(paste(projectPath,"Sessions","RDS_Files",sep = "/"))
fit2.m = readRDS("fit_matched2.rds")
results.m= decideTests(fit2.m)
dge_df.m =topTable(fit2.m, coef=1, number=nrow(fit2.m))
Volcano = topTable(fit2.m, number = 92820, coef = 1)
EnhancedVolcano(Volcano, x = "logFC", y ="adj.P.Val", lab = rownames(Volcano),
subtitle = 'Significance = 5%',pCutoff = 0.05, pointSize = 1, ylim = c(0, 20))
#####not squared, so looks kinda weird
#####gene symbols instead
#####schritte y achse kleiner
TRA_tissuenames = sort(table(c(as.data.frame(TRA_total[,11]))))
barplot(tail(TRA_tissuenames),las =2,col =brewer.pal(5,"Pastel2"), xlab = "tissue" , ylab="Frequency",main ="Tissues with highest frequency of TRAs")
tissue = TRA_total[is.element(TRA_total$ensembl.transcript,rownames(TRAs_mousedata)),]
matched_tissue = tissue[!duplicated(tissue[,1]),]
matched_tissuenames = sort(table(c(as.data.frame(matched_tissue[,11]))))
barplot(tail(matched_tissuenames), las =2,col =brewer.pal(5,"Pastel2"), xlab = "tissue" , ylab="Frequency", main = "Tissues with highest TRA frequency in mouse data")
setwd(paste(projectPath,"Sessions","RDS_Files",sep = "/"))
DGE_tissues = cbind(results.m, matched_tissue[,11])
DGE_foureight = cbind(DGE_tissues[,3],DGE_tissues[,6])
rownames(DGE_foureight) = rownames(DGE_tissues)
colnames(DGE_foureight) = c("four to eight","max.tissue")
DGE_foureight_oe = DGE_foureight[DGE_foureight[,1] == 1,]
DGE_foureight_oe_count = sort(table(c(as.data.frame(DGE_foureight_oe[,2]))))
#DGE_foureight_oe_count = readRDS(file="DGE_foureight_oe_count.RDS")
####should i name it sth else???
barplot(tail(DGE_foureight_oe_count),las =2,col =brewer.pal(6,"Pastel2"), ylab="Frequency",main="Tissues with most overexpressed TRAs in mouse data")
DGE_foureight_ue = DGE_foureight[DGE_foureight[,1] == -1,]
DGE_foureight_ue_count = sort(table(c(as.data.frame(DGE_foureight_ue[,2]))))
barplot(tail(DGE_foureight_ue_count),las =2,col =brewer.pal(6,"Pastel2"), xlab = "tissue" , ylab="Frequency",main ="Tissues with most underexpressed TRAs in mouse data")
# Extracting all over expressed genes in the 4-8 cell stage that are found in the heart
OE_foureight=as.data.frame(DGE_foureight_oe)
oe_foureight_corr=rownames_to_column(OE_foureight, var = "Gene Script")
heart_oe= oe_foureight_corr[oe_foureight_corr$max.tissue=="heart",]
# Extracting all over expressed genes in the 4-8 cell stage that are found in the heart
UE_foureight=as.data.frame(DGE_foureight_ue)
ue_foureight_corr=rownames_to_column(UE_foureight, var = "Gene Script")
heart_ue= ue_foureight_corr[ue_foureight_corr$max.tissue=="heart",]
### venn all stadien all tissue
Venn = vennCounts(results.m)
vennDiagram(Venn)
#####venn for heart only 3 stadien
heart= DGE_tissues[DGE_tissues$max.tissue=="heart",]
Venn_heart_three = vennCounts(heart[,2:4])
vennDiagram(Venn_heart_three)
#####look which genes are in all stadien
###farben
pheatmap(heart)
library(affy)
library(vsn)
library(AnnotationDbi)
library(moe430ammenstcdf)
library(moe430ammenstprobe)
library(bovinebtenstcdf)
library(affy)
library(vsn)
library(AnnotationDbi)
library(moe430ammenstcdf)
library(moe430ammenstprobe)
#library(bovinebtenstcdf)
#library(bovinebtenstprobe)
library(cluster)
library(dplyr)
library(hexbin)
library(pheatmap)
library(rstudioapi)
library(tidyverse)
library(readr)
library(ggplot2)
library(knitr)
library(limma)
library(Rcpp)
library(icd.data)
library(tibble)
library(EnhancedVolcano)
library(ggrepel)
library(clusterProfiler)
library(msigdbr)
library(org.Mm.eg.db)
library(org.Bt.eg.db)
library(magrittr)
pheatmap(heart)
heatmap(heart[,1:5])
heart_matrix= as.matrix(heart[,-6])
heatmap(heart_matrix, col= heat.colors(3))
legend(x="right", legend=c("1", "0", "-1"),fill=heat.colors(3))
tras_with_tissues= rownames_to_column(TRA)
heart_matrix= as.matrix(heart[,-6])
heatmap(heart_matrix, col= heat.colors(3))
legend(x="right", legend=c("1", "0", "-1"),fill=heat.colors(3))
tras_with_tissues= rownames_to_column(TRA)
tras_with_tissues= rownames_to_column(TRA)
as.data.frame(TRA_heart)
tras_with_tissues= rownames_to_column(TRA)
TRA_heart = TRAs_mousedata[which(rownames(TRAs_mousedataset) %in% rownames(heart)),]
as.data.frame(TRA_heart)
boxplot (TRA_heart,col = rainbow (18),cex.axis =0.5)
#setwd(paste(projectPath, "rawdata", "TRA_data", sep = "/"))
#TRAs1 <-read_tsv("tra.2014.mouse.5x.table.tsv")
#TRAs2 <-read_tsv("tra.2014.mouse.4301.5x.table.tsv")
#TRA_total = rbind(TRAs1,TRAs2)
#unique_TRAs = unique(TRAs1$ensembl.transcript, TRAs2$ensembl.transcript)
#TRAs_mousedataset = data_ohneaffx[which(rownames(data_ohneaffx) %in% unique_TRAs),] #removed duplicates
setwd(paste(projectPath,"Sessions","RDS_Files",sep = "/"))
TRA_total = readRDS("TRA_total.rds")
TRAs_mousedata  = readRDS("TRAs_mousedataset.RDS")
TRA_heart = TRAs_mousedata[which(rownames(TRAs_mousedata) %in% rownames(heart)),]
as.data.frame(TRA_heart)
boxplot (TRA_heart,col = rainbow (18),cex.axis =0.5)
TRA_heart = TRAs_mousedata[which(rownames(TRAs_mousedata) %in% rownames(heart)),]
as.data.frame(TRA_heart)
boxplot (TRA_heart,col = rainbow (18),cex.axis =0.5)
boxplot (TRA_heart,col = rainbow (18),cex.axis =0.5)
TRA_heart = TRAs_mousedata[which(rownames(TRAs_mousedata) %in% rownames(heart)),]
as.data.frame(TRA_heart)
par ( las =2)
boxplot (TRA_heart,col = rainbow (18),cex.axis =0.5)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(affy)
library(vsn)
library(AnnotationDbi)
library(moe430ammenstcdf)
library(moe430ammenstprobe)
#library(bovinebtenstcdf)
#library(bovinebtenstprobe)
library(cluster)
library(dplyr)
library(hexbin)
library(pheatmap)
library(rstudioapi)
library(tidyverse)
library(readr)
library(ggplot2)
library(knitr)
library(limma)
library(Rcpp)
library(icd.data)
library(tibble)
library(EnhancedVolcano)
library(ggrepel)
library(clusterProfiler)
library(msigdbr)
library(org.Mm.eg.db)
library(org.Bt.eg.db)
library(magrittr)
library(RColorBrewer)
library(treemap)
library(affy)
library(vsn)
library(AnnotationDbi)
library(moe430ammenstcdf)
library(moe430ammenstprobe)
#library(bovinebtenstcdf)
#library(bovinebtenstprobe)
library(cluster)
library(dplyr)
library(hexbin)
library(pheatmap)
library(rstudioapi)
library(tidyverse)
library(readr)
library(ggplot2)
library(knitr)
library(limma)
library(Rcpp)
library(icd.data)
library(tibble)
library(EnhancedVolcano)
library(ggrepel)
library(clusterProfiler)
library(msigdbr)
library(org.Mm.eg.db)
library(org.Bt.eg.db)
library(magrittr)
library(RColorBrewer)
library(treemap)
projectPath <- dirname(rstudioapi::getSourceEditorContext()$path)
#setwd(paste(projectPath,"Raw_data","GSE18290_mouse",sep = "/"))
#data.mouse=ReadAffy()
#data.mouse@cdfName <- "MOE430A_Mm_ENST"
setwd(paste(projectPath,"Sessions","RDS_Files",sep = "/"))
data.mouse = readRDS("data.mouse.rds")
for (i in 1:18){
image(data.mouse[,i], col = rainbow (100, start = 0, end = 0.75)[100:1])}
# chips GSM456666,GSM456674,GSM456675 have a low quality
########SAVE THEM and load them SQUARE
mouse_RNAdeg <- AffyRNAdeg(data.mouse)
plotAffyRNAdeg(mouse_RNAdeg, col = rainbow(18))
#####SAVE AND SQUARE and SCALED ONLY
setwd(paste(projectPath,"Raw_data","GSE18290_bovine",sep = "/"))
data.bovine= ReadAffy()
data.bovine@cdfName <- "Bovine_Bt_ENST"
#data.bovine  = readRDS(paste(projectPath,"Sessions","RDS_Files","data.bovine16.rds",sep = "/"))
########annotation is not working
for (i in 1:16){
image(data.bovine[,i], col = rainbow (100, start = 0, end = 0.75)[100:1])}
##### save images
bovine_RNAdeg <- AffyRNAdeg(data.bovine)
library(bovinebtenstcdf)
library(bovinebtenstprobe)
install.packages("C:/Users/ninad/OneDrive - bwedu/Universität Nina/FS4_SS22/Bioinfo Projekt/GitHub Desktop/2022-topic-04-team-04/Raw_data/Brainarray_files/bovinebtenstcdf_25.0.0.tar/bovinebtenstcdf_25.0.0.tar", repos = NULL)
library(bovinebtenstcdf)
library(bovinebtenstprobe)
install.packages("C:/Users/ninad/OneDrive - bwedu/Universität Nina/FS4_SS22/Bioinfo Projekt/GitHub Desktop/2022-topic-04-team-04/Raw_data/Brainarray_files/bovinebtenstcdf_25.0.0.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/ninad/OneDrive - bwedu/Universität Nina/FS4_SS22/Bioinfo Projekt/GitHub Desktop/2022-topic-04-team-04/Raw_data/Brainarray_files/bovinebtenstprobe_25.0.0.tar.gz", repos = NULL, type = "source")
library(bovinebtenstcdf)
library(bovinebtenstprobe)
bovine_RNAdeg <- AffyRNAdeg(data.bovine)
plotAffyRNAdeg(bovine_RNAdeg, col = rainbow(16))
RNA_deg_bovine = plotAffyRNAdeg(bovine_RNAdeg, col = rainbow(16))
set.seed(234)
vsnbovine <- vsnrma(data.bovine)
meanSdPlot(vsnbovine, plot = FALSE)$gg + theme(aspect.ratio = 1)
vsn.bovine = exprs(vsnbovine)
save(vsn.bovine, file = "normalizedbovine.rda")
## Before normalization
par ( las =2)
boxplot (data.bovine ,col = rainbow (150),cex.axis = 0.4,main ="Gene expression bovine embryonic development before normalization")
## After normalization
par ( las =2)
boxplot (vsn.bovine,col = rainbow (150),cex.axis =0.5,main ="Gene expression bovine embryonic development after normalization")
## Before normalization
par(mai = c(0.9,0.9,0.9,0.5))
hist(data.bovine, col = rainbow(10), main = "Density function of log intensity bovine ED before normalization")
## After normalization
par(mai = c(0.9,0.9,0.9,0.5))
plot(density(vsn.bovine), type = "n", xlab = "log Intensity", ylim = c(0, 0.6),main = "Density function of log intensity bovine ED after normalization")
for (i in 1:ncol(vsn.bovine)){lines(density(vsn.bovine[,i]), col = rainbow(10)[i])}
load(paste(projectPath,"Sessions","normalizedbovine.rda", sep = "/"))
set.seed(234)
vsnbovine <- vsnrma(data.bovine)
vsnbovine <- vsnrma(data.bovine)
meanSdPlot(vsnbovine, plot = FALSE)$gg + theme(aspect.ratio = 1)
vsn.bovine = exprs(vsnbovine)
save(vsn.bovine, file = "normalizedbovine.rda")
load(paste(projectPath,"Sessions","normalizedbovine.rda", sep = "/"))
#####ADD THE ACTUAL CODE
#bovine_ohneaffx= vsn.bovine[114:17520,]
#namen.b=(substr(rownames(bovine_ohneaffx),0,18)[1:17407])
#rownames(bovine_ohneaffx) <- c(namen.b)
#bovine_ohneaffx= subset(bovine_ohneaffx, select= -c(16))
setwd(paste(projectPath,"Sessions","RDS_Files",sep = "/"))
bovine_ohneaffx = readRDS(file = "bovine_ohneaffx.rds")
bovine_ohneaffx= vsn.bovine[114:17520,]
namen.b=(substr(rownames(bovine_ohneaffx),0,18)[1:17407])
rownames(bovine_ohneaffx) <- c(namen.b)
bovine_ohneaffx= subset(bovine_ohneaffx, select= -c(16))
setwd(paste(projectPath,"Sessions","RDS_Files",sep = "/"))
#design.b= model.matrix(~0+factor(c(1,1,2,2,3,3,4,4,5,5,6,6,7,7,8)))
#colnames(design.b)= c( "oocyte","one", "two","four", "eight","sixteen", "morula",            "blastocyst")
#fit.b = lmFit(bovine_ohneaffx, design.b)
#contrast.matrix.b= makeContrasts(oocyte-one,two-one,four-two, eight-four, morula-eight,      blastocyst-morula,levels = design.b)
#fit2.b = contrasts.fit(fit.b, contrast.matrix.b)
#fit2.b = eBayes(fit2.b)
fit2.b = readRDS(paste(projectPath,"Sessions","RDS_Files","fit2.b.rds",sep = "/"))
design.b= model.matrix(~0+factor(c(1,1,2,2,3,3,4,4,5,5,6,6,7,7,8)))
colnames(design.b)= c( "oocyte","one", "two","four", "eight","sixteen", "morula",            "blastocyst")
fit.b = lmFit(bovine_ohneaffx, design.b)
contrast.matrix.b= makeContrasts(oocyte-one,two-one,four-two, eight-four, morula-eight,      blastocyst-morula,levels = design.b)
fit2.b = contrasts.fit(fit.b, contrast.matrix.b)
fit2.b = eBayes(fit2.b)
fit2.b = readRDS(paste(projectPath,"Sessions","RDS_Files","fit2.b.rds",sep = "/"))
fit2.b = eBayes(fit2.b)
fit2.b = readRDS(paste(projectPath,"Sessions","RDS_Files","fit2.b.rds",sep = "/"))
dge_df.b= topTable(fit2.b, coef=1, number=nrow(fit2.b))
fit.b = lmFit(bovine_ohneaffx, design.b)
contrast.matrix.b= makeContrasts(oocyte-one,two-one,four-two, eight-four, morula-eight,      blastocyst-morula,levels = design.b)
fit2.b = contrasts.fit(fit.b, contrast.matrix.b)
fit2.b = eBayes(fit2.b)
fit2.b = readRDS(paste(projectPath,"Sessions","RDS_Files","fit2.b.rds",sep = "/"))
dge_df.b= topTable(fit2.b, coef=1, number=nrow(fit2.b))
fit2.b = readRDS(paste(projectPath,"Sessions","RDS_Files","fit2.b.rds",sep = "/"))
saveRDA(fit2.b, file= "fit2.b.rda")
save(fit2.b, file= "fit2.b.rda")
fit2.b = readRDS(paste(projectPath,"Sessions","RDS_Files","fit2.b.rds",sep = "/"))
fit2.b = readRDS(paste(projectPath,"Sessions","RDS_Files","fit2.b.rds",sep = "/"))
dge_df.b= topTable(fit2.b, coef=1, number=nrow(fit2.b))
design.b= model.matrix(~0+factor(c(1,1,2,2,3,3,4,4,5,5,6,6,7,7,8)))
colnames(design.b)= c( "oocyte","one", "two","four", "eight","sixteen", "morula",            "blastocyst")
fit.b = lmFit(bovine_ohneaffx, design.b)
contrast.matrix.b= makeContrasts(oocyte-one,two-one,four-two, eight-four, morula-eight,      blastocyst-morula,levels = design.b)
fit2.b = contrasts.fit(fit.b, contrast.matrix.b)
fit2.b = eBayes(fit2.b)
save(fit2.b, file= "fit2.b.rda")
fit2.b = readRDS(paste(projectPath,"Sessions","RDS_Files","fit2.b.rds",sep = "/"))
save(fit2.b, file= "fit2.b.rda")
fit2.b = readRDS(paste(projectPath,"Sessions","RDS_Files","fit2.b.rds",sep = "/"))
save(fit2.b, file= "fit2.b.rda")
saveRDS(fit2.b, file= "fit2.b.rds")
saveRDS(fit2.b, file= "fit2.b.rds")
fit2.b = readRDS(paste(projectPath,"Sessions","RDS_Files","fit2.b.rds",sep = "/"))
dge_df.b= topTable(fit2.b, coef=1, number=nrow(fit2.b))
bovine_ohneaffx= vsn.bovine[114:17520,]
namen.b=(substr(rownames(bovine_ohneaffx),0,18)[1:17407])
rownames(bovine_ohneaffx) <- c(namen.b)
bovine_ohneaffx= subset(bovine_ohneaffx, select= -c(16))
setwd(paste(projectPath,"Sessions","RDS_Files",sep = "/"))
bovine_ohneaffx = readRDS(file = "bovine_ohneaffx.rds")
saveRDS(bovine_ohneaffx, file="bovine_ohneaffx.rds")
#bovine_ohneaffx= vsn.bovine[114:17520,]
#namen.b=(substr(rownames(bovine_ohneaffx),0,18)[1:17407])
#rownames(bovine_ohneaffx) <- c(namen.b)
#bovine_ohneaffx= subset(bovine_ohneaffx, select= -c(16))
#saveRDS(bovine_ohneaffx, file="bovine_ohneaffx.rds")
setwd(paste(projectPath,"Sessions","RDS_Files",sep = "/"))
bovine_ohneaffx = readRDS(file = "bovine_ohneaffx.rds")
#bovine_ohneaffx= vsn.bovine[114:17520,]
#namen.b=(substr(rownames(bovine_ohneaffx),0,18)[1:17407])
#rownames(bovine_ohneaffx) <- c(namen.b)
#bovine_ohneaffx= subset(bovine_ohneaffx, select= -c(16))
#saveRDS(bovine_ohneaffx, file="bovine_ohneaffx.rds")
setwd(paste(projectPath,"Sessions","RDS_Files",sep = "/"))
bovine_ohneaffx = readRDS(file = "bovine_ohneaffx.rds")
#bovine_ohneaffx= vsn.bovine[114:17520,]
#namen.b=(substr(rownames(bovine_ohneaffx),0,18)[1:17407])
#rownames(bovine_ohneaffx) <- c(namen.b)
#bovine_ohneaffx= subset(bovine_ohneaffx, select= -c(16))
saveRDS(bovine_ohneaffx, file="bovine_ohneaffx.rds")
setwd(paste(projectPath,"Sessions","RDS_Files",sep = "/"))
bovine_ohneaffx = readRDS(file = "bovine_ohneaffx.rds")
#design.b= model.matrix(~0+factor(c(1,1,2,2,3,3,4,4,5,5,6,6,7,7,8)))
#colnames(design.b)= c( "oocyte","one", "two","four", "eight","sixteen", "morula",            "blastocyst")
#fit.b = lmFit(bovine_ohneaffx, design.b)
#contrast.matrix.b= makeContrasts(oocyte-one,two-one,four-two, eight-four, morula-eight,      blastocyst-morula,levels = design.b)
#fit2.b = contrasts.fit(fit.b, contrast.matrix.b)
#fit2.b = eBayes(fit2.b)
#saveRDS(fit2.b, file= "fit2.b.rds")
fit2.b = readRDS(paste(projectPath,"Sessions","RDS_Files","fit2.b.rds",sep = "/"))
dge_df.b= topTable(fit2.b, coef=1, number=nrow(fit2.b))
dge_df.b= topTable(fit2.b, coef=1, number=nrow(fit2.b))
#Bt_hallmark_df <- msigdbr(
#  species = "Bos taurus",
#  category = "H")
#Transcript.b = rownames(dge_df.b)
#dge.df.b = cbind(Transcript.b, dge_df.b)
#dge_bovinemapped_df <- data.frame(
#  gene_symbols = mapIds(
#    org.Bt.eg.db,
#    keys =rownames(dge.df.b),
#    keytype = "ENSEMBLTRANS",
#    column = "SYMBOL",
#    multiVals = "first"
#  )
#)%>%
#  dplyr::filter(!is.na(gene_symbols)) %>%
#  tibble::rownames_to_column("Ensembltransbovine") %>%
#  dplyr::inner_join(dge.df.b, by = c("Ensembltransbovine" = "Transcript.b"))
#any(duplicated(dge_bovinemapped_df$gene_symbols))
#bovinedup_gene_symbol <- dge_bovinemapped_df %>%
#  dplyr::filter(duplicated(gene_symbols)) %>%
#  dplyr::pull(gene_symbols)
#filtered_dge_bovinemapped_df <- dge_bovinemapped_df %>%
#  dplyr::arrange(dplyr::desc(abs(dge_bovinemapped_df[,3]))) %>%
#  dplyr::distinct(gene_symbols, .keep_all = TRUE)
#Fcbovine_vector <- filtered_dge_bovinemapped_df[,3]
#names(Fcbovine_vector) <- filtered_dge_bovinemapped_df$gene_symbols
#Fcbovine_vector <- sort(Fcbovine_vector, decreasing = TRUE)
#set.seed(2022)
#gsea_bovineresults <- GSEA(
#  geneList = Fcbovine_vector, # Ordered ranked gene list
#  minGSSize = 25, # Minimum gene set size
#  maxGSSize = 500, # Maximum gene set set,
#  pvalueCutoff = 0.05,# p-value cutoff
#  eps = 0, # Boundary for calculating the p-value
#  seed = TRUE, # Set seed to make results reproducible
#  pAdjustMethod = "BH", # Benjamini-Hochberg correction
#  TERM2GENE = dplyr::select(
#    Bt_hallmark_df,
#    gs_name,
#    gene_symbol,
#  )
#)
gsea.b = readRDS(paste(projectPath,"Sessions","RDS_Files","Gsea_bovine.rds",sep = "/"))
#  pvalueCutoff = 0.05,# p-value cutoff
#  eps = 0, # Boundary for calculating the p-value
#  seed = TRUE, # Set seed to make results reproducible
#  pAdjustMethod = "BH", # Benjamini-Hochberg correction
#  TERM2GENE = dplyr::select(
#    Bt_hallmark_df,
#    gs_name,
#    gene_symbol,
#  )
#)
gsea.b = readRDS(paste(projectPath,"Sessions","RDS_Files","Gsea_bovine.rds",sep = "/"))
knitr::opts_chunk$set(echo = TRUE)
library(affy)
library(vsn)
library(AnnotationDbi)
library(moe430ammenstcdf)
library(moe430ammenstprobe)
#library(bovinebtenstcdf)
#library(bovinebtenstprobe)
library(cluster)
library(dplyr)
library(hexbin)
library(pheatmap)
library(rstudioapi)
library(tidyverse)
library(readr)
library(ggplot2)
library(knitr)
library(limma)
library(Rcpp)
library(icd.data)
library(tibble)
library(EnhancedVolcano)
library(ggrepel)
library(clusterProfiler)
library(msigdbr)
library(org.Mm.eg.db)
library(org.Bt.eg.db)
library(magrittr)
library(RColorBrewer)
library(treemap)
projectPath <- dirname(rstudioapi::getSourceEditorContext()$path)
#setwd(paste(projectPath,"Raw_data","GSE18290_mouse",sep = "/"))
#data.mouse=ReadAffy()
#data.mouse@cdfName <- "MOE430A_Mm_ENST"
setwd(paste(projectPath,"Sessions","RDS_Files",sep = "/"))
data.mouse = readRDS("data.mouse.rds")
mouse_RNAdeg <- AffyRNAdeg(data.mouse)
plotAffyRNAdeg(mouse_RNAdeg, col = rainbow(18))
#####SAVE AND SQUARE and SCALED ONLY
#set.seed(234)
#vsnmouse <- vsnrma(data.mouse)
setwd(paste(projectPath,"Sessions","RDS_Files",sep = "/"))
vsnmouse = readRDS("normalized_18mouse.rds")
#set.seed(234)
#vsnmouse <- vsnrma(data.mouse)
setwd(paste(projectPath,"Sessions","RDS_Files",sep = "/"))
vsnmouse = readRDS("normalized_18mouse.rds")
