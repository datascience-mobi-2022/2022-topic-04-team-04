#setwd(paste(projectPath, "rawdata", "TRA_data", sep = "/"))
#TRAs1 <-read_tsv("tra.2014.mouse.5x.table.tsv")
#TRAs2 <-read_tsv("tra.2014.mouse.4301.5x.table.tsv")
#TRA_total = rbind(TRAs1,TRAs2)
TRA_total = readRDS(paste(projectPath,"Sessions","RDS_Files","TRA_total.rds",sep = "/"))
TRA_tissuenames = sort(table(c(as.data.frame(TRA_total[,11]))))
barplot(tail(TRA_tissuenames),las =2,col = brewer.pal(8,"Pastel2"), xlab = "tissue" , ylab="Frequency",main ="Tissues with highest frequency of TRAs")
#unique_TRAs = unique(TRAs1$ensembl.transcript, TRAs2$ensembl.transcript)
#TRAs_mousedataset = data_ohneaffx[which(rownames(data_ohneaffx) %in% unique_TRAs),] #removed duplicates
TRAs_mousedata  = readRDS(paste(projectPath,"Sessions","RDS_Files","TRAs_mousedataset.RDS",sep = "/"))
# TRAs_mousedata contains TRAs present in our mouse data
gene_names_mouse = read.csv(paste(projectPath,"Tables","gene_names_mouse.csv",sep = "/"))
#design.m= model.matrix(~0+factor(c(1,1,1,2,2,3,3,3,4,4,4,5,6,6,6)))
#colnames(design.m)= c("one", "two","four", "eight", "morula", "blastocyst")
#fit.m= lmFit(TRAs_mousedataset, design.m)
#contrast.matrix.m= makeContrasts(two-one,four-two, eight-four, morula-eight, blastocyst-morula,levels = design.m)
#fit2.m= contrasts.fit(fit.m, contrast.matrix.m)
#fit2.m= eBayes(fit2.m)
#linear model is done
setwd(paste(projectPath,"Sessions","RDS_Files",sep = "/"))
fit2.m = readRDS("fit_matched2.rds")
results.m= decideTests(fit2.m)
dge_df.m =topTable(fit2.m, coef=1, number=nrow(fit2.m))
Volcano.m = readRDS(paste(projectPath,"Sessions","RDS_Files","filtered_dge_mapped_df.rds",sep= "/"))
EnhancedVolcano(Volcano.m, x = "logFC", y ="adj.P.Val", lab = Volcano.m$gene_symbols, title = "Volcano plot of mouse data")
Top10_oe = Volcano.m[Volcano.m$logFC > 0, 'adj.P.Val']
names(Top10_oe) = rownames(Volcano.m)[Volcano.m$logFC > 0]
Top10_oe = names(sort(Top10_oe)[1:10])
par(mfrow= c(1,3))
barplot(summary(results.m)[1,],las =2,col =brewer.pal(8,"Pastel2"), ylab="sum of downregulated genes", main= "Underexpressed genes")
barplot(summary(results.m)[2,],las =2,col =brewer.pal(8,"Pastel2"), ylab="sum of  genes with no significant change", main= "Genes with no significant change")
barplot(summary(results.m)[3,],las =2,col =brewer.pal(8,"Pastel2"), ylab="sum of upregulated genes", main= "Overexpressed genes")
tissue = TRA_total[is.element(TRA_total$ensembl.transcript,rownames(TRAs_mousedata)),]
matched_tissue = tissue[!duplicated(tissue[,1]),]
matched_tissuenames = sort(table(c(as.data.frame(matched_tissue[,11]))))
matched_tissuenames_df = as.data.frame(matched_tissuenames)
DGE_tissues = cbind(results.m, matched_tissue[,11])
DGE_foureight = cbind(DGE_tissues[,3],DGE_tissues[,6])
rownames(DGE_foureight) = rownames(DGE_tissues)
colnames(DGE_foureight) = c("four to eight","max.tissue")
DGE_foureight_oe = DGE_foureight[DGE_foureight[,1] == 1,]
DGE_foureight_oe_count = as.data.frame(sort(table(c(as.data.frame(DGE_foureight_oe[,2])))))
treemap.tissue.oe = c(DGE_foureight_oe_count$DGE_foureight_oe...2.)
treemap.freq.oe = c(DGE_foureight_oe_count$Freq)
treemap.m.oe = data.frame(treemap.tissue.oe, treemap.freq.oe)
treemap(treemap.m.oe,index= "treemap.tissue.oe",
vSize= "treemap.freq.oe",
type="index",
palette = "Pastel2",
title ="Tissues with most overexpressed TRAs between 4-8 cell stages in mouse"
)
DGE_foureight_oe_count = sort(table(c(as.data.frame(DGE_foureight_oe[,2]))))
# We conclude that blastocyst has the highest overexpression and the heart  has the second highest overexpression
heart= DGE_tissues[DGE_tissues$max.tissue=="heart",]
TRA_heart = TRAs_mousedata[rownames(TRAs_mousedata) %in% rownames(heart),]
TRA_heart = as.data.frame(TRA_heart)
par ( las =2, mfrow=c(1,2))
boxplot (TRA_heart,col = brewer.pal(8, "Pastel2"),cex.axis =0.5, main ="Boxplot of heart TRAs")
#####venn for heart only 3 stadien
Venn_heart_three = vennCounts(heart[,2:4])
vennDiagram(Venn_heart_three, main= "Venn diagram of heart TRAs", circle.col = rainbow(10) )
#design.b= model.matrix(~0+factor(c(1,1,2,2,3,3,4,4,5,5,6,6,7,7,8)))
#colnames(design.b)= c( "oocyte","one", "two","four", "eight","sixteen", "morula",            "blastocyst")
#fit.b = lmFit(bovine_ohneaffx, design.b)
#contrast.matrix.b= makeContrasts(oocyte-one,two-one,four-two, eight-four, morula-eight,      blastocyst-morula,levels = design.b)
#fit2.b = contrasts.fit(fit.b, contrast.matrix.b)
#fit2.b = eBayes(fit2.b)
fit2.b = readRDS(paste(projectPath,"Sessions","RDS_Files","fit2.b.rds",sep = "/"))
dge_df.b= topTable(fit2.b, coef=1, number=nrow(fit2.b))
Volcano.b = readRDS(paste(projectPath,"Sessions","RDS_Files",'filtered_dge_bovinemapped_df.rds',sep= "/"))
EnhancedVolcano(Volcano.b, x = "logFC", y ="adj.P.Val", lab = Volcano.b$gene_symbols,
subtitle = 'Significance = 5%',pCutoff = 0.05, pointSize = 1, ylim = c(0, 2), theme(aspect.ratio = 1))
#####not squared, so looks kinda weird
#####gene symbols instead
#####schritte y achse kleiner
#Transcript.m  = rownames(dge_df.m)
#dge.df.m = cbind(Transcript.m, dge_df.m)
#Mm_hallmark_df <- msigdbr(
#  species = "Mus musculus",
# category = "H")
#dge_mapped_df <- data.frame(
#  gene_symbols = mapIds(
#    org.Mm.eg.db,
#    keys =rownames(dge.df.m),
#    keytype = "ENSEMBLTRANS",
#    column = "SYMBOL",
#   multiVals = "first"
#  )
#)%>%
#  dplyr::filter(!is.na(gene_symbols)) %>%
#  tibble::rownames_to_column("Ensembltrans") %>%
#  dplyr::inner_join(dge.df.m, by = c("Ensembltrans" = "Transcript.m"))
#dup_gene_symbol <- dge_mapped_df %>%
#  dplyr::filter(duplicated(gene_symbols)) %>%
#  dplyr::pull(gene_symbols)
#filtered_dge_mapped_df <- dge_mapped_df %>%
#  dplyr::arrange(dplyr::desc(abs(dge_mapped_df[,4]))) %>%
#  dplyr::distinct(gene_symbols, .keep_all = TRUE)
#Fc_vector.m <- filtered_dge_mapped_df[,4]
#names(Fc_vector.m) <- filtered_dge_mapped_df$gene_symbols
#Fc_vector.m <- sort(Fc_vector.m, decreasing = TRUE)
#set.seed(2022)
#gsea.m <- GSEA(
#  geneList = Fc_vector.m,
#  minGSSize = 25,
#  maxGSSize = 500,
# pvalueCutoff = 0.05,
#  eps = 0,
#  seed = TRUE,
#  pAdjustMethod = "BH",
#  TERM2GENE = dplyr::select(
#    Mm_hallmark_df,
#    gs_name,
#    gene_symbol,
#  )
#)
#gsea.m@result
gsea.m = readRDS(paste(projectPath,"Sessions","RDS_Files","gsea.m.rds",sep = "/"))
#####HALLMARK HYPOXIA
#Bt_hallmark_df <- msigdbr(
#  species = "Bos taurus",
#  category = "H")
#Transcript.b = rownames(dge_df.b)
#dge.df.b = cbind(Transcript.b, dge_df.b)
#dge_bovinemapped_df <- data.frame(
#  gene_symbols = mapIds(
#    org.Bt.eg.db,
#    keys =rownames(dge.df.b),
#    keytype = "ENSEMBLTRANS",
#    column = "SYMBOL",
#    multiVals = "first"
#  )
#)%>%
#  dplyr::filter(!is.na(gene_symbols)) %>%
#  tibble::rownames_to_column("Ensembltransbovine") %>%
#  dplyr::inner_join(dge.df.b, by = c("Ensembltransbovine" = "Transcript.b"))
#any(duplicated(dge_bovinemapped_df$gene_symbols))
#bovinedup_gene_symbol <- dge_bovinemapped_df %>%
#  dplyr::filter(duplicated(gene_symbols)) %>%
#  dplyr::pull(gene_symbols)
#filtered_dge_bovinemapped_df <- dge_bovinemapped_df %>%
#  dplyr::arrange(dplyr::desc(abs(dge_bovinemapped_df[,3]))) %>%
#  dplyr::distinct(gene_symbols, .keep_all = TRUE)
#Fcbovine_vector <- filtered_dge_bovinemapped_df[,3]
#names(Fcbovine_vector) <- filtered_dge_bovinemapped_df$gene_symbols
#Fcbovine_vector <- sort(Fcbovine_vector, decreasing = TRUE)
#set.seed(2022)
#gsea_bovineresults <- GSEA(
#  geneList = Fcbovine_vector, # Ordered ranked gene list
#  minGSSize = 25, # Minimum gene set size
#  maxGSSize = 500, # Maximum gene set set,
#  pvalueCutoff = 0.05,# p-value cutoff
#  eps = 0, # Boundary for calculating the p-value
#  seed = TRUE, # Set seed to make results reproducible
#  pAdjustMethod = "BH", # Benjamini-Hochberg correction
#  TERM2GENE = dplyr::select(
#    Bt_hallmark_df,
#    gs_name,
#    gene_symbol,
#  )
#)
gsea.b = readRDS(paste(projectPath,"Sessions","RDS_Files","Gsea_bovine.rds",sep = "/"))
HEMT_plot <- enrichplot::gseaplot(
gsea.b,
geneSetID = "HALLMARK_EPITHELIAL_MESENCHYMAL_TRANSITION",
title = "HALLMARK_EPITHELIAL_MESENCHYMAL_TRANSITION",
color.line = "#0d76ff"
)
HOP_plot <- enrichplot::gseaplot(
gsea.b,
geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION",
title = "HALLMARK_OXIDATIVE_PHOSPHORYLATION",
color.line = "#0d76ff"
)
par(mfrow=c(1,2))
HEMT_plot
HOP_plot
for (i in 1:18){
image(data.mouse[,i], col = rainbow (100, start = 0, end = 0.75)[100:1])}
for (i in 1:16){
image(data.bovine[,i], col = rainbow (100, start = 0, end = 0.75)[100:1])}
knitr::opts_chunk$set(echo = TRUE)
library(affy)
library(vsn)
library(AnnotationDbi)
library(moe430ammenstcdf)
library(moe430ammenstprobe)
library(bovinebtenstcdf)
library(bovinebtenstprobe)
library(cluster)
library(dplyr)
library(hexbin)
library(pheatmap)
library(rstudioapi)
library(tidyverse)
library(readr)
library(ggplot2)
library(knitr)
library(limma)
library(Rcpp)
library(icd.data)
library(tibble)
library(EnhancedVolcano)
library(ggrepel)
library(clusterProfiler)
library(msigdbr)
library(org.Mm.eg.db)
library(org.Bt.eg.db)
library(magrittr)
library(RColorBrewer)
library(treemap)
library(formatR)
library(tinytex)
#install_tinytex(
# force = TRUE,
#  dir = "auto",
#  version = "daily",
#  bundle = "TinyTeX-1",
#  repository = "auto",
#  extra_packages = if (is_tinytex()) tl_pkgs(),
#  add_path = TRUE
#)
#Setting project path
projectPath <- dirname(rstudioapi::getSourceEditorContext()$path)
#loading mouse data
#setwd(paste(projectPath,"Raw_data","GSE18290_mouse",sep = "/"))
#data.mouse=ReadAffy()
#data.mouse@cdfName <- "MOE430A_Mm_ENST"
data.mouse = readRDS(paste(projectPath,"Sessions","RDS_Files","data_mouse.rds",sep = "/"))
#setwd(paste(projectPath,"Raw_data","GSE18290_mouse",sep = "/"))
#data.mouse=ReadAffy()
#data.mouse@cdfName <- "MOE430A_Mm_ENST"
setwd(paste(projectPath,"Sessions","RDS_Files",sep = "/"))
data.mouse = readRDS("data_mouse.rds")
par(mfrow= c(1,3))
image(data.mouse[,6], col = rainbow (100, start = 0, end = 0.75)[100:1], asp=1,axes=FALSE )
image(data.mouse[,14], col = rainbow (100, start = 0, end = 0.75)[100:1],asp=1, axes=FALSE)
image(data.mouse[,15], col = rainbow (100, start = 0, end = 0.75)[100:1], asp=1, axes=FALSE)
# chips GSM456666,GSM456674,GSM456675 have a low quality
#saveRDS(mouse_images, file= "mouse_images.rds")
########SAVE THEM and load them SQUARE
mouse_RNAdeg <- AffyRNAdeg(data.mouse)
plotAffyRNAdeg(mouse_RNAdeg, col = rainbow(18))
setwd(paste(projectPath,"Raw_data","GSE18290_bovine",sep = "/"))
#data.bovine= ReadAffy()
#data.bovine@cdfName <- "Bovine_Bt_ENST"
data.bovine  = readRDS(paste(projectPath,"Sessions","RDS_Files","data.bovine.rds",sep = "/"))
image(data.bovine[,16], col = rainbow (100, start = 0, end = 0.75)[100:1], asp=1, axes=FALSE)
bovine_RNAdeg <- AffyRNAdeg(data.bovine)
plotAffyRNAdeg(bovine_RNAdeg, col = rainbow(16))
#set.seed(234)
#vsnmouse <- vsnrma(data.mouse)
setwd(paste(projectPath,"Sessions","RDS_Files",sep = "/"))
vsnmouse = readRDS("normalized_18mouse.rds")
meanSdPlot(vsnmouse, plot = FALSE)$gg + theme(aspect.ratio = 1)
vsn.mouse = exprs(vsnmouse)
#par(mai = c(0.9,0.9,0.9,0.5))
hist(data.mouse, col = brewer.pal(8, 'Pastel2'), main = "Density function of log intensity mouse ED before normalization")
## After normalization
#par(mai = c(0.9,0.9,0.9,0.5))
plot(density(vsn.mouse), type = "n",col = brewer.pal(8, 'Pastel2'), xlab = "log Intensity", ylim = c(0, 0.6),main = "Density function of log intensity mouse ED after normalization")
for (i in 1:ncol(vsn.mouse)){lines(density(vsn.mouse[,i]), col = rainbow(10)[i])}
## Before normalization
par( las =2, mfrow=c(1,2))
boxplot(data.mouse ,col = brewer.pal(8, "Pastel2") ,cex.axis = 0.4, main ="Gene expression of mouse ED before normalization")
## After normalization
#png("qcvsn_boxplot_m.png", height = 600, width = 800)
par ( las =2)
boxplot (vsn.mouse,col = brewer.pal(8, "Pastel2"),cex.axis =0.5,main ="Gene expression of mouse ED after normalization")
#dev.off
#setwd(paste(projectPath,"Raw_data","GSE18290_mouse",sep = "/"))
#qdata.mouse = ReadAffy()
#qdata.mouse@cdfName <- "MOE430A_Mm_ENST"
#vsn.qmouse = exprs(vsnrma(qdata.mouse))
#data_ohneaffx= vsn.qmouse[65:39345,]
#namen=(substr(rownames(data_ohneaffx),0,18)[1:39281])
#rownames(data_ohneaffx) <- c(namen)
setwd(paste(projectPath,"Sessions","RDS_Files",sep = "/"))
data_ohneaffx = readRDS("data_ohneaffx.RDS")
#set.seed(234)
#vsnbovine <- vsnrma(data.bovine)
vsnbovine = readRDS(paste(projectPath,"Sessions","RDS_Files", "normalizedbovine.rds", sep = "/"))
meanSdPlot(vsnbovine, plot = FALSE)$gg + theme(aspect.ratio = 1)
vsn.bovine = exprs(vsnbovine)
## Before normalization
par (las =2, mfrow=c(1,2))
boxplot (data.bovine ,col = brewer.pal(8,"Pastel2"),cex.axis = 0.4,main ="Gene expression bovine embryonic development before normalization")
## After normalization
par ( las =2)
boxplot (vsn.bovine,col = brewer.pal(8, "Pastel2"),cex.axis =0.5,main ="Gene expression bovine embryonic development after normalization")
## Before normalization
par(mfrow=c(1,2))
hist(data.bovine, col = brewer.pal(8, "Pastel2"), main = "Density function of log intensity bovine ED before normalization")
## After normalization
plot(density(vsn.bovine), type = "n", xlab = "log Intensity", ylim = c(0, 0.6),main = "Density function of log intensity bovine ED after normalization")
for (i in 1:ncol(vsn.bovine)){lines(density(vsn.bovine[,i]), col = brewer.pal(8, "Pastel2")[i])}
#bovine_ohneaffx= vsn.bovine[114:17520,]
#namen.b=(substr(rownames(bovine_ohneaffx),0,18)[1:17407])
#rownames(bovine_ohneaffx) <- c(namen.b)
#bovine_ohneaffx= subset(bovine_ohneaffx, select= -c(16))
setwd(paste(projectPath,"Sessions","RDS_Files",sep = "/"))
bovine_ohneaffx = readRDS(file = "bovine_ohneaffx.rds")
pca = prcomp(t(data_ohneaffx), scale = TRUE)
pca_var = pca$sdev^2    #calculating variation
pca_var_per = round(pca_var/sum(pca_var)*100,1)   # variation into percentage
##### Scree plot
par(mfrow=c(1,2))
qplot(c(1:length(pca_var_per)), pca_var_per) +
geom_col()+
xlab("Principal Component") +
ylab("Percent Variance Explained") +
ggtitle("Scree Plot") +
ylim(0, 40)
pca_data = data.frame(Sample = rownames(pca$x), X= pca$x[,1], Y = pca$x[,2])
ggplot(data=pca_data, aes(x=X, y=Y, label=Sample)) +
xlab(paste("PC1 - ", pca_var_per[1], "%", sep="")) +
ylab(paste("PC2 - ", pca_var_per[2], "%", sep="")) +
theme_bw() +
ggtitle("PCA mouse data") +
geom_text(col= c("red","red","red","blue","blue","black","black","black","gray","gray","gray","green","purple","purple","purple"))
distance_matrix= dist(t(data_ohneaffx), method = "euclidean")
cluster= hclust(distance_matrix, method="average")
plot(cluster,  xlab = "Microarray chips")
#setwd(paste(projectPath, "rawdata", "TRA_data", sep = "/"))
#TRAs1 <-read_tsv("tra.2014.mouse.5x.table.tsv")
#TRAs2 <-read_tsv("tra.2014.mouse.4301.5x.table.tsv")
#TRA_total = rbind(TRAs1,TRAs2)
TRA_total = readRDS(paste(projectPath,"Sessions","RDS_Files","TRA_total.rds",sep = "/"))
TRA_tissuenames = sort(table(c(as.data.frame(TRA_total[,11]))))
barplot(tail(TRA_tissuenames),las =2,col = brewer.pal(8,"Pastel2"), xlab = "tissue" , ylab="Frequency",main ="Tissues with highest frequency of TRAs")
#unique_TRAs = unique(TRAs1$ensembl.transcript, TRAs2$ensembl.transcript)
#TRAs_mousedataset = data_ohneaffx[which(rownames(data_ohneaffx) %in% unique_TRAs),] #removed duplicates
TRAs_mousedata  = readRDS(paste(projectPath,"Sessions","RDS_Files","TRAs_mousedataset.RDS",sep = "/"))
# TRAs_mousedata contains TRAs present in our mouse data
gene_names_mouse = read.csv(paste(projectPath,"Tables","gene_names_mouse.csv",sep = "/"))
#design.m= model.matrix(~0+factor(c(1,1,1,2,2,3,3,3,4,4,4,5,6,6,6)))
#colnames(design.m)= c("one", "two","four", "eight", "morula", "blastocyst")
#fit.m= lmFit(TRAs_mousedataset, design.m)
#contrast.matrix.m= makeContrasts(two-one,four-two, eight-four, morula-eight, blastocyst-morula,levels = design.m)
#fit2.m= contrasts.fit(fit.m, contrast.matrix.m)
#fit2.m= eBayes(fit2.m)
#linear model is done
setwd(paste(projectPath,"Sessions","RDS_Files",sep = "/"))
fit2.m = readRDS("fit_matched2.rds")
results.m= decideTests(fit2.m)
dge_df.m =topTable(fit2.m, coef=1, number=nrow(fit2.m))
Volcano.m = readRDS(paste(projectPath,"Sessions","RDS_Files","filtered_dge_mapped_df.rds",sep= "/"))
EnhancedVolcano(Volcano.m, x = "logFC", y ="adj.P.Val", lab = Volcano.m$gene_symbols, title = "Volcano plot of mouse data")
Top10_oe = Volcano.m[Volcano.m$logFC > 0, 'adj.P.Val']
names(Top10_oe) = rownames(Volcano.m)[Volcano.m$logFC > 0]
Top10_oe = names(sort(Top10_oe)[1:10])
par(mfrow= c(1,3))
barplot(summary(results.m)[1,],las =2,col =brewer.pal(8,"Pastel2"), ylab="sum of downregulated genes", main= "Underexpressed genes")
barplot(summary(results.m)[2,],las =2,col =brewer.pal(8,"Pastel2"), ylab="sum of  genes with no significant change", main= "Genes with no significant change")
barplot(summary(results.m)[3,],las =2,col =brewer.pal(8,"Pastel2"), ylab="sum of upregulated genes", main= "Overexpressed genes")
tissue = TRA_total[is.element(TRA_total$ensembl.transcript,rownames(TRAs_mousedata)),]
matched_tissue = tissue[!duplicated(tissue[,1]),]
matched_tissuenames = sort(table(c(as.data.frame(matched_tissue[,11]))))
matched_tissuenames_df = as.data.frame(matched_tissuenames)
DGE_tissues = cbind(results.m, matched_tissue[,11])
DGE_foureight = cbind(DGE_tissues[,3],DGE_tissues[,6])
rownames(DGE_foureight) = rownames(DGE_tissues)
colnames(DGE_foureight) = c("four to eight","max.tissue")
DGE_foureight_oe = DGE_foureight[DGE_foureight[,1] == 1,]
DGE_foureight_oe_count = as.data.frame(sort(table(c(as.data.frame(DGE_foureight_oe[,2])))))
treemap.tissue.oe = c(DGE_foureight_oe_count$DGE_foureight_oe...2.)
treemap.freq.oe = c(DGE_foureight_oe_count$Freq)
treemap.m.oe = data.frame(treemap.tissue.oe, treemap.freq.oe)
treemap(treemap.m.oe,index= "treemap.tissue.oe",
vSize= "treemap.freq.oe",
type="index",
palette = "Pastel2",
title ="Tissues with most overexpressed TRAs between 4-8 cell stages in mouse"
)
DGE_foureight_oe_count = sort(table(c(as.data.frame(DGE_foureight_oe[,2]))))
# We conclude that blastocyst has the highest overexpression and the heart  has the second highest overexpression
heart= DGE_tissues[DGE_tissues$max.tissue=="heart",]
TRA_heart = TRAs_mousedata[rownames(TRAs_mousedata) %in% rownames(heart),]
TRA_heart = as.data.frame(TRA_heart)
par ( las =2, mfrow=c(1,2))
boxplot (TRA_heart,col = brewer.pal(8, "Pastel2"),cex.axis =0.5, main ="Boxplot of heart TRAs")
#####venn for heart only 3 stadien
Venn_heart_three = vennCounts(heart[,2:4])
vennDiagram(Venn_heart_three, main= "Venn diagram of heart TRAs", circle.col = rainbow(10) )
#design.b= model.matrix(~0+factor(c(1,1,2,2,3,3,4,4,5,5,6,6,7,7,8)))
#colnames(design.b)= c( "oocyte","one", "two","four", "eight","sixteen", "morula",            "blastocyst")
#fit.b = lmFit(bovine_ohneaffx, design.b)
#contrast.matrix.b= makeContrasts(oocyte-one,two-one,four-two, eight-four, morula-eight,      blastocyst-morula,levels = design.b)
#fit2.b = contrasts.fit(fit.b, contrast.matrix.b)
#fit2.b = eBayes(fit2.b)
fit2.b = readRDS(paste(projectPath,"Sessions","RDS_Files","fit2.b.rds",sep = "/"))
dge_df.b= topTable(fit2.b, coef=1, number=nrow(fit2.b))
Volcano.b = readRDS(paste(projectPath,"Sessions","RDS_Files",'filtered_dge_bovinemapped_df.rds',sep= "/"))
EnhancedVolcano(Volcano.b, x = "logFC", y ="adj.P.Val", lab = Volcano.b$gene_symbols,
subtitle = 'Significance = 5%',pCutoff = 0.05, pointSize = 1, ylim = c(0, 2), theme(aspect.ratio = 1))
#####not squared, so looks kinda weird
#####gene symbols instead
#####schritte y achse kleiner
#Transcript.m  = rownames(dge_df.m)
#dge.df.m = cbind(Transcript.m, dge_df.m)
#Mm_hallmark_df <- msigdbr(
#  species = "Mus musculus",
# category = "H")
#dge_mapped_df <- data.frame(
#  gene_symbols = mapIds(
#    org.Mm.eg.db,
#    keys =rownames(dge.df.m),
#    keytype = "ENSEMBLTRANS",
#    column = "SYMBOL",
#   multiVals = "first"
#  )
#)%>%
#  dplyr::filter(!is.na(gene_symbols)) %>%
#  tibble::rownames_to_column("Ensembltrans") %>%
#  dplyr::inner_join(dge.df.m, by = c("Ensembltrans" = "Transcript.m"))
#dup_gene_symbol <- dge_mapped_df %>%
#  dplyr::filter(duplicated(gene_symbols)) %>%
#  dplyr::pull(gene_symbols)
#filtered_dge_mapped_df <- dge_mapped_df %>%
#  dplyr::arrange(dplyr::desc(abs(dge_mapped_df[,4]))) %>%
#  dplyr::distinct(gene_symbols, .keep_all = TRUE)
#Fc_vector.m <- filtered_dge_mapped_df[,4]
#names(Fc_vector.m) <- filtered_dge_mapped_df$gene_symbols
#Fc_vector.m <- sort(Fc_vector.m, decreasing = TRUE)
#set.seed(2022)
#gsea.m <- GSEA(
#  geneList = Fc_vector.m,
#  minGSSize = 25,
#  maxGSSize = 500,
# pvalueCutoff = 0.05,
#  eps = 0,
#  seed = TRUE,
#  pAdjustMethod = "BH",
#  TERM2GENE = dplyr::select(
#    Mm_hallmark_df,
#    gs_name,
#    gene_symbol,
#  )
#)
#gsea.m@result
gsea.m = readRDS(paste(projectPath,"Sessions","RDS_Files","gsea.m.rds",sep = "/"))
#####HALLMARK HYPOXIA
#Bt_hallmark_df <- msigdbr(
#  species = "Bos taurus",
#  category = "H")
#Transcript.b = rownames(dge_df.b)
#dge.df.b = cbind(Transcript.b, dge_df.b)
#dge_bovinemapped_df <- data.frame(
#  gene_symbols = mapIds(
#    org.Bt.eg.db,
#    keys =rownames(dge.df.b),
#    keytype = "ENSEMBLTRANS",
#    column = "SYMBOL",
#    multiVals = "first"
#  )
#)%>%
#  dplyr::filter(!is.na(gene_symbols)) %>%
#  tibble::rownames_to_column("Ensembltransbovine") %>%
#  dplyr::inner_join(dge.df.b, by = c("Ensembltransbovine" = "Transcript.b"))
#any(duplicated(dge_bovinemapped_df$gene_symbols))
#bovinedup_gene_symbol <- dge_bovinemapped_df %>%
#  dplyr::filter(duplicated(gene_symbols)) %>%
#  dplyr::pull(gene_symbols)
#filtered_dge_bovinemapped_df <- dge_bovinemapped_df %>%
#  dplyr::arrange(dplyr::desc(abs(dge_bovinemapped_df[,3]))) %>%
#  dplyr::distinct(gene_symbols, .keep_all = TRUE)
#Fcbovine_vector <- filtered_dge_bovinemapped_df[,3]
#names(Fcbovine_vector) <- filtered_dge_bovinemapped_df$gene_symbols
#Fcbovine_vector <- sort(Fcbovine_vector, decreasing = TRUE)
#set.seed(2022)
#gsea_bovineresults <- GSEA(
#  geneList = Fcbovine_vector, # Ordered ranked gene list
#  minGSSize = 25, # Minimum gene set size
#  maxGSSize = 500, # Maximum gene set set,
#  pvalueCutoff = 0.05,# p-value cutoff
#  eps = 0, # Boundary for calculating the p-value
#  seed = TRUE, # Set seed to make results reproducible
#  pAdjustMethod = "BH", # Benjamini-Hochberg correction
#  TERM2GENE = dplyr::select(
#    Bt_hallmark_df,
#    gs_name,
#    gene_symbol,
#  )
#)
gsea.b = readRDS(paste(projectPath,"Sessions","RDS_Files","Gsea_bovine.rds",sep = "/"))
HEMT_plot <- enrichplot::gseaplot(
gsea.b,
geneSetID = "HALLMARK_EPITHELIAL_MESENCHYMAL_TRANSITION",
title = "HALLMARK_EPITHELIAL_MESENCHYMAL_TRANSITION",
color.line = "#0d76ff"
)
HOP_plot <- enrichplot::gseaplot(
gsea.b,
geneSetID = "HALLMARK_OXIDATIVE_PHOSPHORYLATION",
title = "HALLMARK_OXIDATIVE_PHOSPHORYLATION",
color.line = "#0d76ff"
)
par(mfrow=c(1,2))
HEMT_plot
HOP_plot
for (i in 1:18){
image(data.mouse[,i], col = rainbow (100, start = 0, end = 0.75)[100:1])}
for (i in 1:16){
image(data.bovine[,i], col = rainbow (100, start = 0, end = 0.75)[100:1])}
#design.b= model.matrix(~0+factor(c(1,1,2,2,3,3,4,4,5,5,6,6,7,7,8)))
#colnames(design.b)= c( "oocyte","one", "two","four", "eight","sixteen", "morula",            "blastocyst")
#fit.b = lmFit(bovine_ohneaffx, design.b)
#contrast.matrix.b= makeContrasts(oocyte-one,two-one,four-two, eight-four, morula-eight,      blastocyst-morula,levels = design.b)
#fit2.b = contrasts.fit(fit.b, contrast.matrix.b)
#fit2.b = eBayes(fit2.b)
fit2.b = readRDS(paste(projectPath,"Sessions","RDS_Files","fit2.b.rds",sep = "/"))
dge_df.b= topTable(fit2.b, coef=1, number=nrow(fit2.b))
