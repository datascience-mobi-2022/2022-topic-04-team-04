load("GSE18290_GPL2112.Rdata")
boxplot(exp1_unique)
options (stringsAsFactors = F)
library(limma)
# expression matrix, design matrix, contrast matrix
# design matrix
design1<-model.matrix(~0+factor(group))
colnames(design1)<-levels(factor(group))
rownames(design1)<-colnames(exp1_unique)
#contrast matrix"
contrast.matrix<-makeContrasts(blast-onecell, blast-twocell, blast-fourcell, blast-eightcell,
blast-sixteencell, blast-morula, levels = design1 )
contrast.matrix
# limma DEG
fit<-lmFit(exp1_unique, design1)
fit2<-contrasts.fit(fit,contrast.matrix)
fit2<-eBayes(fit2)
options(digits = 4)
DEG<-topTable(fit2,coef = 1, n =Inf)
DEG$group<-ifelse(DEG$P.Value>0.01,"no change",
ifelse(DEG$logFC>2.5,"up",
ifelse(DEG$logFC< -2.5, "down", "no change")))
table(DEG$group)
DEG$gene<-rownames(DEG)
#single gene expression
library(ggplot2)
library(ggpubr)
datatest<-data.frame(gene=exp1_unique["TCF7",],group=group)
ggplot(data=datatest, aes(x=group, y=gene, fill=group))+geom_boxplot()+
geom_point()+stat_compare_means()
#volcano plot
library(ggplot2)
#basic volcano plot
DEG$p<- -log10(DEG$P.Value)
ggplot(data=DEG,aes(x=logFC,y=p, color=group))+geom_point()
#advanced volcano plot
library(ggrepel)
ggplot(data=DEG,aes(x=logFC,y=p, color=group))+
geom_point(data=DEG[DEG$P.Value<0.01&abs(DEG$logFC)>1000,],size=3)+
geom_point(data=DEG[DEG$P.Value>0.01&abs(DEG$logFC)<1000,],size=2)+
scale_color_manual(values = c("#7bccc4","grey65","#fe9929"))+
xlab("log2(FoldChange)")+ylab("-log10(P.value)")+
geom_text_repel(data = DEG[DEG$P.Value<0.001&abs(DEG$logFC>7500),],
aes(label = gene),
size = 4)
#heatmap
library(pheatmap)
pheatmap(exp1_unique [1:50,])
express_data.mouse= exprs(express_data.mouse)
express_data.mouse= exprs(data.mouse)
ex=na.omit(vsn.qmouse)
plotSA(lmFit(ex), main="Mean variance trend, GSE18290")
gset <- getGEO("GSE18290", GSEMatrix =TRUE, getGPL=FALSE)
library(GEOquery)
library(limma)
install.packages("GEOquery")
BiocManager::install("GEOquery")
options(stringsAsFactors = F)
Sys.setenv("VROOM_CONNECTION_SIZE"=131702*600)
library(GEOquery)
library(limma)
library(affy)
gse<-getGEO("GSE18290",destdir = ".",
getGPL = T,
AnnotGPL =T)
gse[[1]]
gse[[3]]
gse[[2]]
gse[[2]]
exp2<-exprs(gse[[2]])
Clinfo1<-pData(gse[[]])
group<-c(rep("aoocyte",2), rep("bonecell",2), rep("ctwocell",2), rep("dfourcell",2),
rep("eightcell",2), rep("fsixteencell",2),rep("gmorula",2), rep("hblast",2))
View(exp2)
GPL1<-fData(gse[[2]])
View(GPL1)
gpl1<-GPL1[,c(1,3)]
View(gpl1)
gpl1$`Gene symbol`<-data.frame(sapply(gpl1$`Gene symbol`,
function(x)unlist(strsplit(x, "///"))[1]),
stringsAsFactors = F) [,1]
View(gpl1)
gpl1$`Gene symbol`<-data.frame(sapply(gpl1$`Gene symbol`,
function(x)unlist(strsplit(x, "///"))[1]),
stringsAsFactors = F) [,1]
gpl1$"Gene symbol" <-data.frame(sapply(gpl1$"Gene symbol", function(x)unlist(strsplit(x, "///"))[1]),
stringsAsFactors = F) [,1]
View(GPL1)
exp2<-as.data.frame(exp2)
View(exp2)
exp2$ID<-rownames(exp2)
exp2_symbol<-merge(exp2,gpl1,by = "ID")
exp2_symbol<-na.omit(exp2_symbol)
table(duplicated(exp2_symbol$`Gene symbol`))
exp2_unique<-avereps(exp2_symbol[,-c(1,ncol(exp1_symbol))], ID = exp1_symbol$`Gene symbol`)
table(duplicated(rownames(exp1_unique)))
save(exp2, exp2_symbol,exp2_unique, GPL1, gpl1, gse, group, Clinfo1,file = "GSE18290_GPL2112.Rdata")
exp2$ID<-rownames(exp2)
exp2_symbol<-merge(exp2,gpl1,by = "ID")
exp2_symbol<-na.omit(exp2_symbol)
table(duplicated(exp2_symbol$`Gene symbol`))
exp2_unique<-avereps(exp2_symbol[,-c(1,ncol(exp2_symbol))], ID = exp2_symbol$`Gene symbol`)
table(duplicated(rownames(exp2_unique)))
save(exp2, exp2_symbol,exp2_unique, GPL1, gpl1, gse, group, Clinfo1,file = "GSE18290_GPL2112.Rdata")
options(stringsAsFactors = F)
Sys.setenv("VROOM_CONNECTION_SIZE"=131702*600)
library(GEOquery)
library(limma)
library(affy)
gse<-getGEO("GSE18290",destdir = ".",
getGPL = T,
AnnotGPL =T)
gse[[2]]
exp2<-exprs(gse[[2]])
Clinfo1<-pData(gse[[]])
group<-c(rep("aoocyte",2), rep("bonecell",2), rep("ctwocell",2), rep("dfourcell",2),
rep("eightcell",2), rep("fsixteencell",2),rep("gmorula",2), rep("hblast",2))
GPL1<-fData(gse[[2]])
gpl1<-GPL1[,c(1,3)]
gpl1$"Gene symbol" <-data.frame(sapply(gpl1$"Gene symbol", function(x)unlist(strsplit(x, "///"))[1]),
stringsAsFactors = F) [,1]
exp2<-as.data.frame(exp2)
exp2$ID<-rownames(exp2)
exp2_symbol<-merge(exp2,gpl1,by = "ID")
exp2_symbol<-na.omit(exp2_symbol)
table(duplicated(exp2_symbol$`Gene symbol`))
exp2_unique<-avereps(exp2_symbol[,-c(1,ncol(exp2_symbol))], ID = exp2_symbol$`Gene symbol`)
table(duplicated(rownames(exp2_unique)))
save(exp2, exp2_symbol,exp2_unique, GPL1, gpl1, gse, group, Clinfo1,file = "GSE18290_GPL2112.Rdata")
save(exp2, exp2_symbol,exp2_unique, GPL1, gpl1, gse, group, Clinfo2,file = "GSE18290_GPL2112.Rdata")
Clinfo2<-pData(gse[[2]])
save(exp2, exp2_symbol,exp2_unique, GPL1, gpl1, gse, group, Clinfo2,file = "GSE18290_GPL2112.Rdata")
load("GSE18290_GPL2112.Rdata")
boxplot(exp1_unique)
options (stringsAsFactors = F)
library(limma)
boxplot(exp1_unique)
load("GSE18290_GPL2112.Rdata")
boxplot(exp1_unique)
load("GSE18290_GPL2112.Rdata")
boxplot(exp1_unique)
library(limma)
load("GSE18290_GPL2112.Rdata")
boxplot(exp2_unique)
options (stringsAsFactors = F)
library(limma)
View(vsn.qmouse)
load("~/Bioinfo/2022-topic-04-team-04/project/GSE18290_GPL2112.Rdata")
table(duplicated(rownames(exp2_unique)))
table(duplicated(rownames(exp2_unique)))
View(exp2_symbol)
View(GPL1)
View(exp2)
View(Clinfo2)
design<-model.matrix(~0+factor(group))
colnames(design)<-levels(factor(group))
rownames(design)<-colnames(exp1_unique)
rownames(design)<-colnames(exp2_unique)
design<-model.matrix(~0+factor(group))
colnames(design)<-levels(factor(group))
rownames(design)<-colnames(exp2_unique)
library(limma)
design<-model.matrix(~0+factor(group))
colnames(design)<-levels(factor(group))
rownames(design)<-colnames(exp2_unique)
dimnames[1]
dimnames(exp2_unique[1])
design<-model.matrix(~0+factor(group))
colnames(design)<-levels(factor(group))
rownames(design)<-colnames(exp2_unique)
#download data and ID conversion
options(stringsAsFactors = F)
Sys.setenv("VROOM_CONNECTION_SIZE"=131702*600)
library(GEOquery)
library(limma)
library(affy)
gse<-getGEO("GSE18290",destdir = ".",
getGPL = T,
AnnotGPL =T)
gse[[2]]
exp2<-exprs(gse[[2]])
Clinfo2<-pData(gse[[2]])
group<-c(rep("aoocyte",2), rep("bonecell",2), rep("ctwocell",2), rep("dfourcell",2),
rep("eightcell",2), rep("fsixteencell",2),rep("gmorula",2), rep("hblast",2))
GPL1<-fData(gse[[2]])
gpl1<-GPL1[,c(1,3)]
gpl1$"Gene symbol" <-data.frame(sapply(gpl1$"Gene symbol", function(x)unlist(strsplit(x, "///"))[1]),
stringsAsFactors = F) [,1]
exp2<-as.data.frame(exp2)
exp2$ID<-rownames(exp2)
exp2_symbol<-merge(exp2,gpl1,by = "ID")
exp2_symbol<-na.omit(exp2_symbol)
table(duplicated(exp2_symbol$`Gene symbol`))
exp2_unique<-avereps(exp2_symbol[,-c(1,ncol(exp2_symbol))], ID = exp2_symbol$`Gene symbol`)
table(duplicated(rownames(exp2_unique)))
save(exp2, exp2_symbol,exp2_unique, GPL1, gpl1, gse, group, Clinfo2,file = "GSE18290_GPL2112.Rdata")
load("GSE18290_GPL2112.Rdata")
boxplot(exp2_unique)
options (stringsAsFactors = F)
library(limma)
# expression matrix, design matrix, contrast matrix
# design matrix
design<-model.matrix(~0+factor(group))
colnames(design)<-levels(factor(group))
rownames(design)<-colnames(exp2_unique)
#contrast matrix"
contrast.matrix<-makeContrasts(blast-onecell, blast-twocell, blast-fourcell, blast-eightcell,
blast-sixteencell, blast-morula, levels = design1 )
contrast.matrix
contrast.matrix<-makeContrasts(blast-onecell, blast-twocell, blast-fourcell, blast-eightcell,
blast-sixteencell, blast-morula, levels = design )
contrast.matrix
#contrast matrix"
contrast.matrix<-makeContrasts(blast-onecell, blast-twocell, blast-fourcell, blast-eightcell,
blast-sixteencell, blast-morula, levels = design )
?blast
??blast
View(exp2_unique)
library(pheatmap)
pheatmap(exp2_unique)
pheatmap(exp2_unique [1:50,])
pheatmap(exp2_unique [1:50,], fontsize = 7)
pheatmap(exp2_unique [1:50,], fontsize = 7, fontsize_row = fontsize)
pheatmap(exp2_unique [1:50,], fontsize = 7, fontsize_row = 5)
pheatmap(exp2_unique [1:50,], fontsize = 7, fontsize_row = 1)
pheatmap(exp2_unique [1:50,], fontsize = 7, fontsize_row = 3)
pheatmap(exp2_unique [1:50,], fontsize = 7, fontsize_row = 2)
projectPath <- dirname(rstudioapi::getSourceEditorContext()$path)
library(GEOquery)
library(limma)
library(affy)
gse<-getGEO("GSE18290",destdir = ".",
getGPL = T,
AnnotGPL =T)
library(GEOquery)
library(limma)
library(affy)
gse<-getGEO("GSE18290",destdir = ".",
getGPL = T,
AnnotGPL =T)
library(GEOquery)
library(limma)
library(affy)
gse<-getGEO("GSE18290",destdir = ".",
getGPL = T,
AnnotGPL =T)
gse[[2]]
exp2<-exprs(gse[[2]])
Clinfo2<-pData(gse[[2]])
group<-c(rep("aoocyte",2), rep("bonecell",2), rep("ctwocell",2), rep("dfourcell",2),
rep("eightcell",2), rep("fsixteencell",2),rep("gmorula",2), rep("hblast",2))
GPL1<-fData(gse[[2]])
gpl1<-GPL1[,c(1,3)]
gpl1$"Gene symbol" <-data.frame(sapply(gpl1$"Gene symbol", function(x)unlist(strsplit(x, "///"))[1]),
stringsAsFactors = F) [,1]
exp2<-as.data.frame(exp2)
exp2$ID<-rownames(exp2)
exp2_symbol<-merge(exp2,gpl1,by = "ID")
exp2_symbol<-na.omit(exp2_symbol)
table(duplicated(exp2_symbol$`Gene symbol`))
exp2_unique<-avereps(exp2_symbol[,-c(1,ncol(exp2_symbol))], ID = exp2_symbol$`Gene symbol`)
table(duplicated(rownames(exp2_unique)))
save(exp2, exp2_symbol,exp2_unique, GPL1, gpl1, gse, group, Clinfo2,file = "GSE18290_GPL2112.Rdata")
gse<-getGEO("GSE18290",destdir = ".",
getGPL = T,
AnnotGPL =T)
exp2<-exprs(gse[[2]])
Clinfo2<-pData(gse[[2]])
group<-c(rep("aoocyte",2), rep("bonecell",2), rep("ctwocell",2), rep("dfourcell",2),
rep("eightcell",2), rep("fsixteencell",2),rep("gmorula",2), rep("hblast",2))
GPL1<-fData(gse[[2]])
gpl1<-GPL1[,c(1,3)]
gpl1$"Gene symbol" <-data.frame(sapply(gpl1$"Gene symbol", function(x)unlist(strsplit(x, "///"))[1]),
stringsAsFactors = F) [,1]
exp2<-as.data.frame(exp2)
exp2$ID<-rownames(exp2)
exp2_symbol<-merge(exp2,gpl1,by = "ID")
exp2_symbol<-na.omit(exp2_symbol)
table(duplicated(exp2_symbol$`Gene symbol`))
exp2_unique<-avereps(exp2_symbol[,-c(1,ncol(exp2_symbol))], ID = exp2_symbol$`Gene symbol`)
table(duplicated(rownames(exp2_unique)))
save(exp2, exp2_symbol,exp2_unique, GPL1, gpl1, gse, group, Clinfo2,file = "GSE18290_GPL2112.Rdata")
pheatmap(exp2_unique [1:50,], fontsize_row = 2)
pheatmap(exp2_unique [1:50,], fontsize_row = 2.5)
pheatmap(exp2_unique [1:50,], fontsize_row = 4)
#####Amena Code Dump----------------------------####################
matched_tissues = TRA_total[which(TRA_total[,1] %in% rownames(TRAs_mousedataset)),]
knitr::opts_chunk$set(echo = TRUE)
TRA_total
TRA_total=rbind(TRAs1,TRAs2)
knitr::opts_chunk$set(echo = TRUE)
library(affy)
library(vsn)
library(AnnotationDbi)
library(moe430ammenstprobe)
library(moe430ammenstcdf)
library(hexbin)
library(pheatmap)
library(rstudioapi)
library(tidyverse)
library(dplyr)
library(icd.data)
library(tibble)
projectPath <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(paste(projectPath, "rawdata", "TRA_data", sep = "/"))
# taking out control rows
head(vsn.qmouse, n = 64)
data_ohneaffx= vsn.qmouse[65:39345,]
x = rownames(data_ohneaffx)
namen=(substr(x,0,18)[1:39281])
rownames(data_ohneaffx) <- c(namen)
data_ohneaffx
setwd(paste(projectPath, "rawdata", "TRA_data", sep = "/"))
TRAs1 <-read_tsv("tra.2014.mouse.5x.table.tsv")
TRAs2 <-read_tsv("tra.2014.mouse.4301.5x.table.tsv")
TRA_total=rbind(TRAs1,TRAs2)
#TRA_unique = unique(TRA_total)
#TRA_u = unique(TRA_total, by= TRA_total[,1] )
#TRA_uni <- TRA_total %>% distinct(TRA_total[,1], .keep_all = FALSE)
#TRA_fuck = merge( x= TRA_total, y= TRA_uni, by= TRA_total[,1])
unique_TRAs = unique(TRAs1$ensembl.transcript, TRAs2$ensembl.transcript) # Lösung für unique
#TRA_univ = as.vector(TRA_uni)
#namenv = as.vector(namen)
#matched = TRA_univ %in% namenv
#sum(matched)
#namenc = as.character(namen)
#TRA_unic = as.character(TRA_uni)
TRAs_mousedataset = data_ohneaffx[which(rownames(data_ohneaffx) %in% unique_TRAs),]
# gematchte Gene, alle TRAs die es in unserem Datensatz gibt
#####Amena Code Dump----------------------------####################
matched_tissues = TRA_total[which(TRA_total[,1] %in% rownames(TRAs_mousedataset)),]
View(matched_tissues)
#matched_tissues_copy = cbind(matched_tissues[,1], matched_tissues)
duplicates = duplicated(matched_tissues[,1])
matched_tissues_new = matched_tissues[!duplicates,]
#####Amena Code Dump----------------------------####################
matched_tissues = TRA_total[which(TRA_total[,1] %in% rownames(TRAs_mousedataset)),]
TRAs_mousedataset = data_ohneaffx[which(rownames(data_ohneaffx) %in% unique_TRAs),]
TRAs_mousedataset = data_ohneaffx[which(rownames(data_ohneaffx) %in% unique_TRAs),]
#####Amena Code Dump----------------------------####################
matched_tissues = TRA_total[which(TRA_total[,1] %in% rownames(TRAs_mousedataset)),]
View(matched_tissues)
knitr::opts_chunk$set(echo = TRUE)
library(affy)
library(vsn)
library(AnnotationDbi)
library(moe430ammenstcdf)
library(moe430ammenstprobe)
library(cluster)
library(dplyr)
library(hexbin)
library(pheatmap)
library(rstudioapi)
library(tidyverse)
library(readr)
library(ggplot2)
library(knitr)
library(limma)
library(Rcpp)
library(icd.data)
library(tibble)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
library(affy)
library(vsn)
library(AnnotationDbi)
library(moe430ammenstcdf)
library(moe430ammenstprobe)
library(cluster)
library(dplyr)
library(hexbin)
library(pheatmap)
library(rstudioapi)
library(tidyverse)
library(readr)
library(ggplot2)
library(knitr)
library(limma)
library(Rcpp)
library(icd.data)
library(tibble)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
library(affy)
library(vsn)
library(AnnotationDbi)
library(moe430ammenstcdf)
library(moe430ammenstprobe)
library(cluster)
library(dplyr)
library(hexbin)
library(pheatmap)
library(rstudioapi)
library(tidyverse)
library(readr)
library(ggplot2)
library(knitr)
library(limma)
library(Rcpp)
library(icd.data)
library(tibble)
projectPath <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(paste(projectPath,"rawdata","zippedmouse",sep = "/"))
data.mouse=ReadAffy()
data.mouse@cdfName <- "MOE430A_Mm_ENST"
for (i in 1:18){
image(data.mouse[,i], col = rainbow (100, start = 0, end = 0.75)[100:1])}
mouse_RNAdeg <- AffyRNAdeg(data.mouse)
plotAffyRNAdeg(mouse_RNAdeg, col = rainbow(15))
set.seed(234)
vsnmouse <- vsnrma(data.mouse)
meanSdPlot(vsnmouse, plot = FALSE)$gg + theme(aspect.ratio = 1)
vsn.mouse = exprs(vsnmouse)
## Before normalization
par ( las =2)
boxplot (data.mouse ,col = rainbow (150),cex.axis = 0.4,main ="Gene expression mouse embryonic development before normalization")
## After normalization
par ( las =2)
boxplot (vsn.mouse,col = rainbow (150),cex.axis =0.5,main ="Gene expression mouse embryonic development after normalization")
## Before normalization
par(mai = c(0.9,0.9,0.9,0.5))
hist(data.mouse, col = rainbow(10), main = "Density function of log intensity mouse ED before normalization")
## After normalization
par(mai = c(0.9,0.9,0.9,0.5))
plot(density(vsn.mouse), type = "n", xlab = "log Intensity", ylim = c(0, 0.6),main = "Density function of log intensity mouse ED after normalization")
for (i in 1:ncol(vsn.mouse)){lines(density(vsn.mouse[,i]), col = rainbow(10)[i])}
setwd(paste(projectPath,"rawdata","qualityzipped",sep = "/"))
qdata.mouse = ReadAffy()
qdata.mouse@cdfName <- "MOE430A_Mm_ENST"
vsnqmouse = vsnrma(qdata.mouse)
vsn.qmouse = exprs(vsnqmouse)
data_ohneaffx= vsn.qmouse[65:39345,]
namen=(substr(rownames(data_ohneaffx),0,18)[1:39281])
rownames(data_ohneaffx) <- c(namen)
data_ohneaffx
setwd(paste(projectPath, "rawdata", "TRA_data", sep = "/"))
TRAs1 <-read_tsv("tra.2014.mouse.5x.table.tsv")
TRAs2 <-read_tsv("tra.2014.mouse.4301.5x.table.tsv")
TRA_total = rbind(TRAs1,TRAs2)
unique_TRAs = unique(TRAs1$ensembl.transcript, TRAs2$ensembl.transcript)
TRAs_mousedataset = data_ohneaffx[which(rownames(data_ohneaffx) %in% unique_TRAs),]
design1= model.matrix(~0+factor(c(1,1,1,2,2,3,3,3,4,4,4,5,6,6,6)))
colnames(design1)= c("one", "two","four", "eight", "morula", "blastocyst")
fit_matched= lmFit(TRAs_mousedataset, design1)
contrast.matrix_new= makeContrasts(two-one,four-two, eight-four, morula-eight, blastocyst-morula,levels = design1)
fit_matched2= contrasts.fit(fit_matched, contrast.matrix)
View(data.mouse)
View(data.mouse)
#####Amena Code Dump----------------------------####################
matched_tissues = TRA_total[which(TRA_total[,1] %in% rownames(TRAs_mousedataset)),]
View(matched_tissues)
matched_tissues = TRA_total[which(TRA_total[,1] %in% rownames(TRAs_mousedataset)),]
View(matched_tissues)
#matched_tissues_copy = cbind(matched_tissues[,1], matched_tissues)
duplicates = duplicated(matched_tissues[,1])
matched_tissues_new = matched_tissues[!duplicates,]
library(affy)
library(vsn)
library(AnnotationDbi)
library(moe430ammenstprobe)
library(moe430ammenstcdf)
library(hexbin)
library(pheatmap)
library(rstudioapi)
library(tidyverse)
library(dplyr)
library(icd.data)
library(tibble)
library(data.table)
#Wir brauchen:
TRA_total # Alle TRAs die uns zur verfügung stehen, enthält Tissues die wir brauchen
TRAs_mousedataset #TRAs, die in unserem Dataset sind, 6188 Zeilen, TRA_total muss gekürzt werden
#1. Erste column von TRA_total(esemble.transcript) als row names, um später matchen/subsetten zu können
rownames(TRA_total) = TRA_total$ensembl.transcript # gibt error, da es doppelte rownames gibt, Plan: nuiques nutzen, um keine gleichen rownames zu haben
#1. Erste column von TRA_total(esemble.transcript) als row names, um später matchen/subsetten zu können
rownames(TRA_total) = TRA_total$ensembl.transcript # gibt error, da es doppelte rownames gibt, Plan: nuiques nutzen, um keine gleichen rownames zu haben
vec = c(rownames(TRAs_mousedataset)) # alle unique TRAs sind jetzt in diesem Vektor
vec = c(rownames(TRAs_mousedataset)) # alle unique TRAs sind jetzt in diesem Vektor
tissue = TRA_total[TRA_total$ensembl.transcript %in% rownames_TRAs_mousedataset, ] #Problem: gibt zwar was aus aber das sieht sehr falsch aus
unique_TRA_total = unique(TRA_total[,1]) # schmießt doppelte esemble transcripts raus
namesTRA_total = c(unique_TRA_total[,1]) # vektor aus unique TRA namen
TRA_unique_names = rownames(rownamesTRA_total) # vektor aus unique TRA names als rownames setzen -> NULL
TRA_total
# df mean expression zeigt mean expressions pro zellstadium, noch keine Tissues vorhanden
df_mean_expression= data.frame(mean_expression_1cell, mean_expression_2cell, mean_expression_4cell, mean_expression_8cell, mean_expression_morula,mean_expression_blastocyst)
df_mean_expression
# wir wollen: df_mean_expression mit tissues und Results -> Matchen von TRAs_Transcriptnames with TRAs_total
#df_mean_expression -> Mean von 6188 Genes
#TRA_total --> TRA table with tissue and all genes
Tissue_TRA = df_mean_expression[which(rownames(df_mean_expression) %in% unique_TRAs)]
TRAs_mousedataset = data_ohneaffx[which(rownames(data_ohneaffx) %in% unique_TRAs),]
Matched_with_tissue = cbind
#####Amena Code Dump----------------------------####################
matched_tissues = TRA_total[which(TRA_total[,1] %in% rownames(TRAs_mousedataset)),]
View(matched_tissues)
TRA_total
TRA_tissuenames = as.data.frame(TRA_total[,11])
TRA_tissuevector = c(TRA_tissuenames)
Tissue_counts = table(TRA_tissuevector)
view(Tissue_counts)
view(Tissue_sort)
Tissue_sort = sort(Tissue_counts)
view(Tissue_sort)
Top_tissue = tail(Tissue_sort)
plot(Top_tissue)
plot(Tissue_counts)
plot(Top_tissue)
vsnqmouse = vsnrma(qdata.mouse)
vsn.qmouse = exprs(vsnqmouse)
saveRDS(mat, file = "my_data.rds")
length(vsn.qmouse)
dim(vsn.qmouse)
dim(vsnqmouse)
vsnqmouse = vsnrma(qdata.mouse)
