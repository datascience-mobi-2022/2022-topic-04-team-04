# 
# Author: Ian Dirk Fichtner
# Email: ifichtner@protonmail.com
# Date: 12.08.2021
# R Course Tumoour Envirnoment @ Dr. Dinkelacker
#
# Exercise 7
# Microarray analysis of breast cancer, IL genes plots
# Database: GEO, dataset: GSE27830
# https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE27830
# Microarray chip: HG-U133_Plus_2 Affymetrix Human Genome U133 Plus 2.0 Array
#


# Install corresponding Brainarray chip packages

# Must be from source file! Rtools required for compilation
#install.packages("hgu133plus2hsenstcdf_24.0.0.zip.gz", repos = NULL, type = "source")
#install.packages("hgu133plus2hsenstprobe_24.0.0.zip.gz", repos = NULL, type = "source")

# Import libraries
library("Rcpp")
library("tidyverse")
library("affy")
library("vsn")
library("AnnotationDbi")
library("ggplot2")
library("readr")
library("hgu133plus2hsenstcdf")
library("hgu133plus2hsenstprobe")
library("hexbin")


#### 1. Read in Microarray data

setwd("../../Raw-Data/Breast-Cancer/")

data.breast <- ReadAffy()
data.breast@cdfName <- "HGU133Plus2_Hs_ENST"

setwd("../../Sessions/R-Files/")

save.image("../RDA-Files/exercise_7.rda")


### 2. QUALITY CONTROL 1

image(data.breast, col=rainbow(100, start = 0, end = 0.75)[100:1])

# GSM687019 looks good 
# GSM687022 looks good
# GSM687035 looks good
# GSM697053 looks good
# GSM687070 looks good
# GSM687083 looks good
# GSM687097 looks good
# GSM687121 looks good
# GSM687143 looks good
# GSM687162 looks good

#Save file for documentation e.g. GSM687070
image(data.breast[,5], col=rainbow(100, start = 0, end = 0.75)[100:1])

dev.copy2pdf(file= "../../Plots/exercise_7_QC1_Singlechip..pdf")

#Save data
save.image("../RDA-Files/exercise_7_data_raw.rda")



### 3. vsn normalisation

breast.vsnrma <- vsnrma(data.breast)

## Pheno data: Remove file-endings (.CEL) from sample names

# Raw data
filenames <- rownames(pData(data.breast))
samples <- substr(filenames, 1,9)                                   # Only keeps 1st to 9th character in the string
rownames(pData(data.breast)) = samples
rownames

# Normalized data
filenames <- rownames(pData(breast.vsnrma))
samples <- substr(filenames, 1,9)                                   # Only keeps 1st to 9th character in the string
rownames(pData(breast.vsnrma)) = samples
rownames(pData(breast.vsnrma))

## Expression data: Remove file-endings (.CEL) from sample names

# Raw data
orig <- colnames(exprs(data.breast))
new <- substr(orig, 1, nchar(orig)-4)                               # Removes last 4 characters in the string
colnames(exprs(data.breast)) = new

# Normalized data
orig <- colnames(exprs(breast.vsnrma))
new <- substr(orig, 1, nchar(orig)-4)                               # Removes last 4 characters in the string
colnames(exprs(breast.vsnrma)) = new

#Save data
save.image("../RDA-Files/exercise_7_data_vsn.rda")



### 4. QUALITY CONTROL 2: meanSd plot

meanSdPlot(breast.vsnrma, xlab="Rank (mean)", ylab="Standard Deviation")

#Save file for documentation
dev.copy2pdf(file= "../../Plots/exercise_7_QC2_meanSd.pdf")



### 5. QUALITY CONTROL 3: Boxplots before and after normalization

## Before

boxplot(data.breast, col = rainbow(15),
        cex.axis=0.5,
        las=2,                                            # Vertical x-axis text
        ylab="Relative expression",
        main="Raw Gene expression in human breast cancer (GSE27830, raw data)")

dev.copy2pdf(file = "../../Plots/exercise_7_QC3_Boxplot_Raw-Data.pdf")

## After

boxplot(exprs(breast.vsnrma), col = rainbow(15),
        cex.axis=0.5,
        las=2,                                            # Vertical x-axis text
        ylab="Relative expression",
        main="Raw Gene expression in human breast cancer (GSE27830, normalized)")

dev.copy2pdf(file = "../../Plots/exercise_7_QC3_Boxplot_Normalized.pdf")


### 5. QUALITY CONTROL 4: Density function before and after normalization

# Before
hist(data.breast,
     col=rainbow(10),
     ylim = c(0,0.5),
     ylab= "Density",
     xlab="Log Intensity",
     main = "Density function of log intensity in human breast cancer (raw data)")

dev.copy2pdf(file = "../../Plots/exercise_7_QC4_Histogramm_Raw-Data.pdf")

# After
eset <- exprs(breast.vsnrma)

plot(density(eset[,1]), type="n", 
     xlab="log Intensity",
     ylim=c(0,0.4),
     ylab= "Density",
     main="Density function of log Intensity of human breast cancer (normalized data)")

for(i in 1:ncol(eset)){
  lines(density(eset[,i]), col=rainbow(10)[i])
}

dev.copy2pdf(file = "../../Plots/exercise_7_QC4_Histogramm_Normalized.pdf")



### 6. RNA degradation plot

rnadeg.raw <- AffyRNAdeg(data.breast)

plotAffyRNAdeg(rnadeg.raw, col=rainbow(10))
title(sub="Human Breast Cancer (GSE27830, Raw data)")

dev.copy2pdf(file="../../Plots/exercise_7_RNAdeg_raw.pdf")

# Not scaled
plotAffyRNAdeg(rnadeg.raw, col=rainbow(10), transform = "shift.only")
title(sub="Human Breast Cancer (GSE27830, Raw data)")

dev.copy2pdf(file="../../Plots/exercise_7_RNAdeg_raw_unscaled.pdf")

# Samples look good: Lines don't cross



### 7. QUALITY CONTROL 5: Scatter plot

for(i in 1:9){
  plot(eset[,c(i,i+1)], pch=".", cex=2)
  abline(0, 1, col="red")               # 45 degree dividing line
  
  title(main = paste("Scatterplot of probe", 
                     substr(colnames(breast.vsnrma)[i], 1, nchar(colnames(breast.vsnrma)[i])), "and", 
                     substr(colnames(breast.vsnrma)[i+1], 1, nchar(colnames(breast.vsnrma)[i+1])), 
                     sep=" ", collapse = NULL))
  
  file.name <- paste("../../Plots/exercise_7_QC5_Scatterplot_", 
                     as.character(substr(colnames(breast.vsnrma)[i], 1, nchar(colnames(breast.vsnrma)[i]))), "_",
                     as.character(substr(colnames(breast.vsnrma)[i+1], 1, nchar(colnames(breast.vsnrma)[i+1]))),
                     ".pdf", sep="")
  
  dev.copy2pdf(file = file.name)
  dev.off()
}

# The script may pause here. Ignore the error and continue the execution

# All scatterplots look decently good. No banana shapes and very light scattering



### 8. Data analysis

## Create dataframe

df.norm <- as.data.frame(exprs(breast.vsnrma))

#Remove .cel from rows
rownames(df.norm) <- gsub("\\..*$" ,"", rownames(df.norm)) # Strip file endings

#Import IL Gene table from ex 2
table.il <- DataFrame(read.csv("../../Tables/exercise_2_table_ILgenes.csv", row.names = 3))
#rownames(table.il) <- table.il$transID


## Filter microarray data for IL genes

df.norm.filt <- df.norm[rownames(df.norm)%in%rownames(table.il),]

# Translocate
df.norm.filt.t <- t(df.norm.filt)

# Regive lost column name
colnames(df.norm.filt.t) <- table.il[rownames(df.norm.filt), "trans_name"]


## Order column names
df.norm.filt.t <- df.norm.filt.t[, order(colnames(df.norm.filt.t))]


## Create column for facetting

map.align <- tibble(Transcript = colnames(df.norm.filt.t), align =(1:dim(df.norm.filt.t)[2] %/% 100)) # A column with separators: 0, 1, 2
df.norm.filt.longer <- gather(as_tibble(df.norm.filt.t), key="Transcript", value = "Expression") # Merging all transcripts into a single column with a separate key column
df.norm.merge <- merge(df.norm.filt.longer, map.align, on="Transcript") # Merging our data frame with the map.align column. We lose chip donor but its ok,

## Plot

fig1 <- ggplot(filter(df.norm.merge, align==0 | align==1)) +
  geom_boxplot(aes(Transcript, Expression, fill=Transcript), show.legend = F, outlier.size = 0.6, outlier.shape= 16, outlier.stroke = 0, lwd=0.1) +
  facet_wrap(.~align, scales="free_x", ncol = 1) + #nur eine Spalte
  theme(
    axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.5, size = 7),
    strip.text = element_blank() # Delete facetting text
  ) + 
  expand_limits(x=100) +
  labs(x = "Transcript",
       title = "Distribution of interleukin expression in breast cancer",
       subtitle = "GEO dataset: GSE27830")

print(fig1)


fig2 <- ggplot(filter(df.norm.merge, align==2 | align==3)) +
  geom_boxplot(aes(Transcript, Expression, fill=Transcript), show.legend = F, outlier.size = 0.6, outlier.shape= 16, outlier.stroke = 0, lwd=0.1) +
  facet_wrap(.~align, scales="free_x", ncol = 1) + #nur eine Spalte
  theme(
    axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.5, size = 7),
    strip.text = element_blank() # Delete facetting text
  ) + 
  expand_limits(x=100) +
  labs(x = "Transcript",
       title = "Distribution of interleukin expression in breast cancer",
       subtitle = "GEO dataset: GSE27830")

print(fig2)

## Save plot
pdf(file="../../Plots/exercise_7_Gene_expression_IL_breast_cancer.pdf", height = 7, width = 10)
print(fig1)
print(fig2)
dev.off()

### Save data

# Expression table with annotations
hg104 <- read.csv("../../Raw-Data/ensembl_human_104.csv") #human genome

## csv: All microarray genes
gene.exp <- data.frame(exprs(breast.vsnrma))
gene.exp["Transcript.stable.ID"] <- gsub("[\\._].*$" ,"", rownames(gene.exp)) # Prep for merging

write.csv(
  right_join(hg104, gene.exp, by="Transcript.stable.ID"), 
  "../../Tables/exercise_7_Microarray_Genes.csv",
  quote=F,
  row.names = F
)

## csv: Only IL microarray genes
il.exp <- data.frame(t(df.norm.filt.t)[order(rownames(t(df.norm.filt.t))),])

# Prepare extra column for merging
il.exp["Transcript.name"] <- rownames(il.exp) 

write.csv(right_join(hg104, il.exp, by="Transcript.name"),
          "../../Tables/exercise_7_Micorarray_Ilgenes.csv",
          quote=F,
          row.names=F
)

save.image("../RDA-Files/exercise_7.rda")
